<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NList</name>
    </assembly>
    <members>
        <member name="T:NList.NullComparer`1">
            <summary>
            Compares items such that they are always equal.
            </summary>
            <typeparam name="T">The type of the items to compare.</typeparam>
        </member>
        <member name="M:NList.NullComparer`1.Compare(`0,`0)">
            <summary>
            Always returns zero, indicating that the two values are equal.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>Zero, indicating that the two values are equal.</returns>
        </member>
        <member name="P:NList.NullComparer`1.Default">
            <summary>
            Gets the default instance of a NullComparer.
            </summary>
        </member>
        <member name="T:NList.Extensions.Dictionary">
            <summary>
            Provides extension methods for working with instances of <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:NList.Extensions.Dictionary.DictionaryEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Determines whether the two dictionarys have the same key/value pairs.
            </summary>
            <typeparam name="TKey">The type of the keys in the two dictionaries.</typeparam>
            <typeparam name="TValue">The type of the values in two dictionaries.</typeparam>
            <param name="dictionary">The first dictionary.</param>
            <param name="other">The second dictionary.</param>
            <returns>True if the two dictionaries have the same key/value pairs; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The first dictionary is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second dictionary is null.</exception>
            <remarks>If the key equality comparer is different for the two dictionarys, there could be unexpected behavior.</remarks>
        </member>
        <member name="M:NList.Extensions.Dictionary.DictionaryEquals``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Determines whether the two dictionarys have the same key/value pairs.
            </summary>
            <typeparam name="TKey">The type of the keys in the two dictionaries.</typeparam>
            <typeparam name="TValue">The type of the values in two dictionaries.</typeparam>
            <param name="dictionary">The first dictionary.</param>
            <param name="other">The second dictionary.</param>
            <param name="comparer">The comparer to use to compare the dictionary values -or- if null, the default equality comparison for the value type.</param>
            <returns>True if the two dictionaries have the same key/value pairs; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The first dictionary is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second dictionary is null.</exception>
            <remarks>If the key equality comparer is different for the two dictionarys, there could be unexpected behavior.</remarks>
        </member>
        <member name="T:NList.TypedList`2">
            <summary>
            Provides a typed interface for a non-generic list.
            </summary>
            <typeparam name="TList">The type of the non-generic list to wrap.</typeparam>
            <typeparam name="T">The base type of the items in the non-generic list.</typeparam>
        </member>
        <member name="M:NList.TypedList`2.#ctor(`0)">
            <summary>
            Initializes a new instance of a TypedList.
            </summary>
            <param name="list">The list to wrap.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.TypedList`2.Add(`1)">
            <summary>
            Adds the given item to the end of the list.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:NList.TypedList`2.Clear">
            <summary>
            Removes all of the items from the list.
            </summary>
        </member>
        <member name="M:NList.TypedList`2.Contains(`1)">
            <summary>
            Determines whether the given item exists in the list.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>True if the item is in the list; otherwise, false.</returns>
        </member>
        <member name="M:NList.TypedList`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the list to the give array, starting at the specified index.
            </summary>
            <param name="array">The array to copy the list to.</param>
            <param name="arrayIndex">The index into the array to start copying.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The array index is negative -or- outside the bounds of the array.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of items in the list is greater than the available space from arrayIndex to the end of the destination array.
            </exception>
            <exception cref="T:System.InvalidCastException">
            An item in the list is incompatible with the type of the items in the array.
            </exception>
            <remarks>
            If an item in the list causes an <see cref="T:System.InvalidCastException"/> to be thrown, 
            the array will contain any items that were copied.
            </remarks>
        </member>
        <member name="M:NList.TypedList`2.IndexOf(`1)">
            <summary>
            Gets the index of the item in the list.
            </summary>
            <param name="item">The item to get the index for.</param>
            <returns>The index of the first occurrence of the item -or- -1 if it it is not found.</returns>
        </member>
        <member name="M:NList.TypedList`2.Insert(System.Int32,`1)">
            <summary>
            Inserts the item at the given index.
            </summary>
            <param name="index">The index to insert the item at.</param>
            <param name="item">The item to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- outside the bounds of the list.</exception>
        </member>
        <member name="M:NList.TypedList`2.Remove(`1)">
            <summary>
            Removes the first occurrence of the given item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
        </member>
        <member name="M:NList.TypedList`2.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the given index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:NList.TypedList`2.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:NList.TypedList`2.List">
            <summary>
            Gets the underlying list.
            </summary>
        </member>
        <member name="P:NList.TypedList`2.Item(System.Int32)">
            <summary>
            Gets or sets the item at the given index.
            </summary>
            <param name="index">The index of the item to get.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- outside the bounds of the list.</exception>
            <exception cref="T:System.InvalidCastException">
            The item at the given index is incompatible with the type of the items in the list.
            </exception>
        </member>
        <member name="P:NList.TypedList`2.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="T:NList.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.ArgumentsOfTypeRequired">
            <summary>
              Looks up a localized string similar to One of the values could not be cast to the type whose keys are being compared..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.ArrayTooSmall">
            <summary>
              Looks up a localized string similar to More items exist than are remaining in the array..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.ArrayWrongType">
            <summary>
              Looks up a localized string similar to The array contained the wrong type of items..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.CountOutOfRange">
            <summary>
              Looks up a localized string similar to The count was negative or was larger than the remaining items..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.EditReadonlyDictionary">
            <summary>
              Looks up a localized string similar to An attempt was made to edit a read-only dictionary..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.EditReadonlyList">
            <summary>
              Looks up a localized string similar to An attempt was made to edit a read-only list..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.EditReadonlySet">
            <summary>
              Looks up a localized string similar to An attempt was made to edit a read-only set..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.EmptySequence">
            <summary>
              Looks up a localized string similar to The collection cannot be empty..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.IndexOutOfRange">
            <summary>
              Looks up a localized string similar to The index was negative or beyond the bounds of the list..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.KeyNotFound">
            <summary>
              Looks up a localized string similar to The key {0} could not be found..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.ListChanged">
            <summary>
              Looks up a localized string similar to The list has changed during the enumeration..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.MissingClosingEachTag">
            <summary>
              Looks up a localized string similar to A matching /each tag could not be found..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.MissingClosingIfTag">
            <summary>
              Looks up a localized string similar to A matching /if tag could not be found..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.MissingClosingWithTag">
            <summary>
              Looks up a localized string similar to A matching /with tag could not be found..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.RemoveEmptyPriorityQueue">
            <summary>
              Looks up a localized string similar to An attempt was made to remove the top item in an empty priority queue..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.TooSmall">
            <summary>
              Looks up a localized string similar to The value cannot be less than {0}..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.TopEmptyPriorityQueue">
            <summary>
              Looks up a localized string similar to An attempt was made to view the top item in an empty priority queue..
            </summary>
        </member>
        <member name="P:NList.Properties.Resources.WrongSubclass">
            <summary>
              Looks up a localized string similar to Could not convert an interface to the needed internal type..
            </summary>
        </member>
        <member name="T:NList.DefaultDictionary">
            <summary>
            Provides extension methods for creating instances of DefaultDictionary.
            </summary>
        </member>
        <member name="M:NList.DefaultDictionary.Defaulted``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Creates a new DefaultDictionary that wraps the given dictionary.
            </summary>
            <typeparam name="TKey">The type of the dictionary keys.</typeparam>
            <typeparam name="TValue">The type of the dictionary values.</typeparam>
            <param name="dictionary">The dictionary to wrap.</param>
            <returns>A new DefaultDictionary wrapping the given dictionary.</returns>
            <exception cref="T:System.ArgumentNullException">The dictionary is null.</exception>
        </member>
        <member name="M:NList.DefaultDictionary.Defaulted``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,``1})">
            <summary>
            Creates a new DefaultDictionary that wraps the given dictionary and uses the given generator to create default values.
            </summary>
            <typeparam name="TKey">The type of the dictionary keys.</typeparam>
            <typeparam name="TValue">The type of the dictionary values.</typeparam>
            <param name="dictionary">The dictionary to wrap.</param>
            <param name="defaultGenerator">The generator to use to create default values.</param>
            <returns>A new DefaultDictionary wrapping the given dictionary that uses the given generator to create default values.</returns>
            <exception cref="T:System.ArgumentNullException">The dictionary is null.</exception>
            <exception cref="T:System.ArgumentNullException">The default generator is null.</exception>
        </member>
        <member name="T:NList.DefaultDictionary`2">
            <summary>
            Wraps a dictionary such that accessing the dictionary with an unknown key results in a default value being returned.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:NList.DefaultDictionary`2.#ctor">
            <summary>
            Initializes a new instance of a DefaultDictionary.
            </summary>
        </member>
        <member name="M:NList.DefaultDictionary`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of a DefaultDictionary using the given default generator.
            </summary>
            <param name="defaultGenerator">The default generator to use.</param>
            <exception cref="T:System.ArgumentNullException">The default generator is null.</exception>
        </member>
        <member name="M:NList.DefaultDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of a DefaultDictionary using the given equality comparer.
            </summary>
            <param name="comparer">The equality comparer to use to compare key values.</param>
            <exception cref="T:System.ArgumentNullException">The equality comparer is null.</exception>
        </member>
        <member name="M:NList.DefaultDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Func{`0,`1})">
            <summary>
            Initializes a new instance instance of a DefaultDictionary using the given equality comparer and default generator.
            </summary>
            <param name="comparer">The equality comparer to use to compare key values.</param>
            <param name="defaultGenerator">The generator to use to create default values.</param>
            <exception cref="T:System.ArgumentNullException">The equality comparer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The default generator is null.</exception>
        </member>
        <member name="M:NList.DefaultDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of a DefaultDictionary using the given dictionary.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
            <exception cref="T:System.ArgumentNullException">The dictionary is null.</exception>
        </member>
        <member name="M:NList.DefaultDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Func{`0,`1})">
            <summary>
            Initializes a new instance of a DefaultDictionary using the given dictionary.
            </summary>
            <param name="dictionary">The dictionary to wrap.</param>
            <param name="defaultGenerator">The generator to use to generate default values.</param>
            <exception cref="T:System.ArgumentNullException">The dictionary is null.</exception>
            <exception cref="T:System.ArgumentNullException">The default generator is null.</exception>
        </member>
        <member name="M:NList.DefaultDictionary`2.Add(`0,`1)">
            <summary>
            Adds the given key/value pair to the dictionary.
            </summary>
            <param name="key">The key to associate the value with.</param>
            <param name="value">The value to associate with the key.</param>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
            <exception cref="T:System.ArgumentException">The given key already exists.</exception>
        </member>
        <member name="M:NList.DefaultDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the given key exists in the dictionary.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>True if the key exists in the dictionary; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
        </member>
        <member name="M:NList.DefaultDictionary`2.Remove(`0)">
            <summary>
            Removes the key/value pair with the given key from the dictionary.
            </summary>
            <param name="key">The key of the pair to remove.</param>
            <returns>True if the key was found and the pair removed; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
        </member>
        <member name="M:NList.DefaultDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value associated with the given key. If the key is not found,
            the default value is stored in the value.
            </summary>
            <param name="key">The key to get the value for.</param>
            <param name="value">The value used to hold the results.</param>
            <returns>True if the key was found; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
        </member>
        <member name="M:NList.DefaultDictionary`2.Clear">
            <summary>
            Removes all key/value pairs from the dictionary.
            </summary>
        </member>
        <member name="M:NList.DefaultDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates through the key/value pairs.
            </summary>
            <returns>An enumerator that enumerates through the key/value pairs.</returns>
        </member>
        <member name="P:NList.DefaultDictionary`2.Dictionary">
            <summary>
            Gets the underlying dictionary.
            </summary>
        </member>
        <member name="P:NList.DefaultDictionary`2.DefaultGenerator">
            <summary>
            Gets the generator used to generate default values.
            </summary>
        </member>
        <member name="P:NList.DefaultDictionary`2.Keys">
            <summary>
            Gets the keys in the dictionary.
            </summary>
        </member>
        <member name="P:NList.DefaultDictionary`2.Values">
            <summary>
            Gets the values in the dictionary.
            </summary>
        </member>
        <member name="P:NList.DefaultDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the given key.
            </summary>
            <param name="key">The key to get associated value by or to associate with the value.</param>
            <returns>The value associated with the given key.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
        </member>
        <member name="P:NList.DefaultDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs in the dictionary.
            </summary>
        </member>
        <member name="T:NList.Extensions.Sequence">
            <summary>
            Provides extension methods for working with instances of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:NList.Extensions.Sequence.CompareTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compares the collection to the other collection.
            </summary>
            <typeparam name="TSource">The type of the items in the collections.</typeparam>
            <param name="first">The collection to compare to the other collection.</param>
            <param name="second">The collection to compare to this collection.</param>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The other collection is null.</exception>
            <exception cref="T:System.ArgumentException">There is not a default comparison defined for the item type.</exception>
            <returns>
            If two items compare to be different, the result of the comparison will be returned.
            If all the items match but the first collection has fewer items, -1 will be returned.
            If all the items match but the second collection has fewer items, 1 will be returned.
            Otherwise, if all the items match and the collections are the same size, 0 will be returned.
            </returns>
        </member>
        <member name="M:NList.Extensions.Sequence.CompareTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Compares the collection to the other collection.
            </summary>
            <typeparam name="T">The type of the items in the collections.</typeparam>
            <param name="first">The collection to compare to the other collection.</param>
            <param name="second">The collection to compare to this collection.</param>
            <param name="comparer">The comparer to use to compare items in the collections.</param>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The other collection is null.</exception>
            <exception cref="T:System.ArgumentException">The comparer is null and there is not a default comparison defined for the item type.</exception>
            <returns>
            If two items compare to be different, the result of the comparison will be returned.
            If all the items match but the first collection has fewer items, -1 will be returned.
            If all the items match but the second collection has fewer items, 1 will be returned.
            Otherwise, if all the items match and the collections are the same size, 0 will be returned.
            </returns>
        </member>
        <member name="M:NList.Extensions.Sequence.Except``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1})">
            <summary>
            Creates a new collection containing the items in the source collection
            whose keys are not found in the other collection.
            </summary>
            <typeparam name="TSource">The type of the items in the source collection.</typeparam>
            <typeparam name="TKey">The type of the keys and the items in the other collection.</typeparam>
            <param name="first">The collection of items to filter.</param>
            <param name="second">The collection of values to remove from the source.</param>
            <param name="keySelector">A method that can extract a key from the source items.</param>
            <returns>
            A new collection containing the items in the source collection whose keys were not in the other collection.
            </returns>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The other collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.InvalidOperationException">There is no default comparer for the key.</exception>
        </member>
        <member name="M:NList.Extensions.Sequence.Except``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a new collection containing the items in the source collection
            whose keys are not found in the other collection.
            </summary>
            <typeparam name="TSource">The type of the items in the source collection.</typeparam>
            <typeparam name="TKey">The type of the keys and the items in the other collection.</typeparam>
            <param name="first">The collection of items to filter.</param>
            <param name="second">The collection of values to remove from the source.</param>
            <param name="keySelector">A method that can extract a key from the source items.</param>
            <param name="keyComparer">The comparer to use to compare key values.</param>
            <returns>
            A new collection containing the items in the source collection whose keys were not in the other collection.
            </returns>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The other collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.InvalidOperationException">There is no default comparer for the key.</exception>
            <remarks>If the key comparer is null, the default comparison is used.</remarks>
        </member>
        <member name="M:NList.Extensions.Sequence.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs an action for each item in the collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="source">The collection whose items the action should be performed on.</param>
            <param name="action">The action to perform.</param>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The action is null.</exception>
            <remarks>
            It is easy to abuse this function to create code that is hard to read. It is best practice
            to use a foreach loop or call a helper function.
            </remarks>
        </member>
        <member name="M:NList.Extensions.Sequence.Intersect``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1})">
            <summary>
            Creates a new collection containing the items in the source collection
            whose keys are also found in the other collection.
            </summary>
            <typeparam name="TSource">The type of the items in the source collection.</typeparam>
            <typeparam name="TKey">The type of the keys and the items in the other collection.</typeparam>
            <param name="first">The collection of items to filter.</param>
            <param name="second">The collection of values to remove from the source.</param>
            <param name="keySelector">A method that can extract a key from the source items.</param>
            <returns>
            A new collection containing the items in the source collection whose keys were also in the other collection.
            </returns>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The other collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.InvalidOperationException">There is no default comparer for the key.</exception>
        </member>
        <member name="M:NList.Extensions.Sequence.Intersect``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a new collection containing the items in the source collection
            whose keys are also found in the other collection.
            </summary>
            <typeparam name="TSource">The type of the items in the source collection.</typeparam>
            <typeparam name="TKey">The type of the keys and the items in the other collection.</typeparam>
            <param name="first">The collection of items to filter.</param>
            <param name="second">The collection of values to remove from the source.</param>
            <param name="keySelector">A method that can extract a key from the source items.</param>
            <param name="keyComparer">The comparer to use to compare key values.</param>
            <returns>
            A new collection containing the items in the source collection whose keys were also in the other collection.
            </returns>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The other collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.InvalidOperationException">There is no default comparer for the key.</exception>
            <remarks>If the key comparer is null, the default comparison is used.</remarks>
        </member>
        <member name="M:NList.Extensions.Sequence.MaxByKey``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Finds the item in the source collection with the largest key, as returned by the given key selector.
            </summary>
            <typeparam name="TSource">The type of the items in the collection.</typeparam>
            <typeparam name="TKey">The type of the key returned by the key selector.</typeparam>
            <param name="source">The collection to find the max item in.</param>
            <param name="keySelector">A method that extracts the key from an item.</param>
            <returns>The item in the source collection with the largest key.</returns>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.ArgumentException">The type of the key is not comparable.</exception>
            <exception cref="T:System.InvalidOperationException">The source collection is empty.</exception>
        </member>
        <member name="M:NList.Extensions.Sequence.MinByKey``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Finds the item in the source collection with the smallest key, as returned by the given key selector.
            </summary>
            <typeparam name="TSource">The type of the items in the collection.</typeparam>
            <typeparam name="TKey">The type of the key returned by the key selector.</typeparam>
            <param name="source">The collection to find the min item in.</param>
            <param name="keySelector">A method that extracts the key from an item.</param>
            <returns>The item in the source collection with the smallest key.</returns>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.ArgumentException">The type of the key is not comparable.</exception>
            <exception cref="T:System.InvalidOperationException">The source collection is empty.</exception>
        </member>
        <member name="M:NList.Extensions.Sequence.RandomSamples``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Gets the requested number of random items from the collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="source">The collection to get the random samples from.</param>
            <param name="numberOfSamples">The number of samples to retrieve.</param>
            <returns>The requested number of random items from the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of samples is negative.</exception>
            <remarks>If the collection does not contain the needed number of items, all items are returned.</remarks>
        </member>
        <member name="M:NList.Extensions.Sequence.RandomSamples``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random)">
            <summary>
            Gets the requested number of random items from the collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="source">The collection to get the random samples from.</param>
            <param name="numberOfSamples">The number of samples to retrieve.</param>
            <param name="random">The random number generator to use.</param>
            <returns>The requested number of random items from the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of samples is negative.</exception>
            <exception cref="T:System.ArgumentNullException">The random number generator is null.</exception>
            <remarks>If the collection does not contain the needed number of items, all items are returned.</remarks>
        </member>
        <member name="M:NList.Extensions.Sequence.RandomSamples``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32})">
            <summary>
            Gets the requested number of random items from the collection.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="source">The collection to get the random samples from.</param>
            <param name="numberOfSamples">The number of samples to retrieve.</param>
            <param name="generator">The random number generator to use.</param>
            <returns>The requested number of random items from the collection.</returns>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of samples is negative.</exception>
            <exception cref="T:System.ArgumentNullException">The generator is null.</exception>
            <remarks>If the collection does not contain the needed number of items, all items are returned.</remarks>
        </member>
        <member name="M:NList.Extensions.Sequence.RotateLeft``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Creates a new collection with the items in the given collection rotated shift items.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="source">The collection to rotate.</param>
            <param name="shift">The number of items to rotate the collection to the left.</param>
            <returns>A new collection with the items in the given collection rotated shift items.</returns>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <remarks>
            If the shift is negative, the algoritm simulates rotating the items to the right. If the shift is larger than the number of items, 
            the algorithm will simulate a complete rotation as many times as necessary.
            </remarks>
        </member>
        <member name="M:NList.Extensions.Sequence.ToOrderedDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Creates a new OrderedDictionary from the given collection, using the key selector to extract the key.
            </summary>
            <typeparam name="TSource">The type of the items in the collection.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The items to created the OrderedDictionary from.</param>
            <param name="keySelector">A delegate that can extract a key from an item in the collection.</param>
            <returns>An OrderedDictionary mapping the extracted keys to their values.</returns>
        </member>
        <member name="M:NList.Extensions.Sequence.ToOrderedDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a new OrderedDictionary from the given collection, using the key selector to extract the key.
            The key comparer is passed to the OrderedDictionary for comparing the extracted keys.
            </summary>
            <typeparam name="TSource">The type of the items in the collection.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="source">The items to created the OrderedDictionary from.</param>
            <param name="keySelector">A delegate that can extract a key from an item in the collection.</param>
            <param name="comparer">The key equality comparer to use to compare keys in the dictionary.</param>
            <returns>An OrderedDictionary mapping the extracted keys to their values.</returns>
        </member>
        <member name="T:NList.ReadOnlyList">
            <summary>
            Provides methods for creating instances of ReadOnlyList.
            </summary>
        </member>
        <member name="M:NList.ReadOnlyList.ReadOnly``1(System.Collections.Generic.List{``0})">
            <summary>
            Wraps a list with a ReadOnlyLit.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to wrap.</param>
            <returns>A ReadOnlyList wrapping the given list.</returns>
        </member>
        <member name="M:NList.ReadOnlyList.ReadOnly``1(``0[])">
            <summary>
            Wraps an array with a ReadOnlyLit.
            </summary>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The array to wrap.</param>
            <returns>A ReadOnlyList wrapping the given array.</returns>
        </member>
        <member name="M:NList.ReadOnlyList.ReadOnly``1(System.Collections.ObjectModel.Collection{``0})">
            <summary>
            Wraps a collection with a ReadOnlyLit.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to wrap.</param>
            <returns>A ReadOnlyList wrapping the given collection.</returns>
        </member>
        <member name="T:NList.ReadOnlyList`2">
            <summary>
            Creates a view into a list such that it cannot be modified.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
        </member>
        <member name="M:NList.ReadOnlyList`2.#ctor(`0)">
            <summary>
            Initializes a new instance of a ReadOnlyList that wraps the given list.
            </summary>
            <param name="list">The list to wrap.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.ReadOnlyList`2.IndexOf(`1)">
            <summary>
            Finds the index of the given item in the list.
            </summary>
            <param name="item">The value to find the index for.</param>
            <returns>The index of the item in the list; otherwise -1.</returns>
        </member>
        <member name="M:NList.ReadOnlyList`2.Insert(System.Int32,`1)">
            <summary>
            Inserts the value at the given index. This operation is not supported.
            </summary>
            <param name="index">The index to insert the item.</param>
            <param name="item">The item to insert.</param>
            <exception cref="T:System.NotSupportedException">The list is read-only.</exception>
        </member>
        <member name="M:NList.ReadOnlyList`2.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the given index. This operation is not supported.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The list is read-only.</exception>
        </member>
        <member name="M:NList.ReadOnlyList`2.Add(`1)">
            <summary>
            Adds the given item to the end of the list. This operation is not supported.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.NotSupportedException">The list is read-only.</exception>
        </member>
        <member name="M:NList.ReadOnlyList`2.Clear">
            <summary>
            Clears the list of all items. This operation is not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">The list is read-only.</exception>
        </member>
        <member name="M:NList.ReadOnlyList`2.Contains(`1)">
            <summary>
            Determines whether the given item is in the list.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>True if the value exists in the list; otherwise false.</returns>
        </member>
        <member name="M:NList.ReadOnlyList`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the list to the give array, starting at the specified index.
            </summary>
            <param name="array">The array to copy the list to.</param>
            <param name="arrayIndex">The index into the array to start copying.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The array index is negative -or- outside the bounds of the array.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of items in the list is greater than the available space from arrayIndex to the end of the destination array.
            </exception>
        </member>
        <member name="M:NList.ReadOnlyList`2.Remove(`1)">
            <summary>
            Removes the item from the list. This operation is not supported.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
            <exception cref="T:System.NotSupportedException">The list is read-only.</exception>
        </member>
        <member name="M:NList.ReadOnlyList`2.GetEnumerator">
            <summary>
            Gets an enumerator over the items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:NList.ReadOnlyList`2.op_Implicit(`0)~NList.ReadOnlyList{`0,`1}">
            <summary>
            Implicitly creates a new instance of a ReadOnlyList from a list.
            </summary>
            <param name="list">The list to wrap with a ReadOnlyList.</param>
            <returns>A new instance of a ReadOnlyList.</returns>
        </member>
        <member name="P:NList.ReadOnlyList`2.List">
            <summary>
            Gets or sets the underlying list.
            </summary>
        </member>
        <member name="P:NList.ReadOnlyList`2.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name="index">The index of the item to get.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- outside the bounds of the list.</exception>
            <exception cref="T:System.NotSupportedException">The list is read-only.</exception>
        </member>
        <member name="P:NList.ReadOnlyList`2.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:NList.ReadOnlyList`2.IsReadOnly">
            <summary>
            Gets whether the list is read-only.
            </summary>
        </member>
        <member name="T:NList.PropertyDictionary">
            <summary>
            Provides methods for creating instances of PropertyDictionary.
            </summary>
        </member>
        <member name="M:NList.PropertyDictionary.#ctor(System.Object)">
            <summary>
            Initializes a new instance of a PropertyDictionary.
            </summary>
            <param name="instance">The instance to wrap in the PropertyDictionary.</param>
        </member>
        <member name="M:NList.PropertyDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether a property with the given name exists.
            </summary>
            <param name="key">The name of the property.</param>
            <returns>True if the property exists; otherwise, false.</returns>
        </member>
        <member name="M:NList.PropertyDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries to get the value for the given property name.
            </summary>
            <param name="key">The name of the property to get the value for.</param>
            <param name="value">The variable to store the value of the property or the default value if the property is not found.</param>
            <returns>True if a property with the given name is found; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The name of the property was null.</exception>
        </member>
        <member name="M:NList.PropertyDictionary.GetEnumerator">
            <summary>
            Gets the propety name/value pairs in the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:NList.PropertyDictionary.Instance">
            <summary>
            Gets the underlying instance.
            </summary>
        </member>
        <member name="P:NList.PropertyDictionary.Keys">
            <summary>
            Gets the name of the properties in the type.
            </summary>
        </member>
        <member name="P:NList.PropertyDictionary.Values">
            <summary>
            Gets the values of all of the properties in the object.
            </summary>
        </member>
        <member name="P:NList.PropertyDictionary.Item(System.String)">
            <summary>
            Gets or sets the value of the property with the given name.
            </summary>
            <param name="key">The name of the property to get or set.</param>
            <returns>The value of the property with the given name.</returns>
            <exception cref="T:System.ArgumentNullException">The property name was null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The type does not have a property with the given name.</exception>
            <exception cref="T:System.ArgumentException">The property did not support getting or setting.</exception>
            <exception cref="T:System.ArgumentException">
            The object does not match the target type, or a property is a value type but the value is null.
            </exception>
        </member>
        <member name="P:NList.PropertyDictionary.Count">
            <summary>
            Gets the number of properties in the type.
            </summary>
        </member>
        <member name="P:NList.PropertyDictionary.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#IsReadOnly">
            <summary>
            Gets or sets whether updates will be ignored.
            </summary>
        </member>
        <member name="T:NList.KeyComparer`1">
            <summary>
            Compares values by comparing their extracted key values.
            </summary>
            <typeparam name="T">The type being compared.</typeparam>
        </member>
        <member name="M:NList.KeyComparer`1.#ctor">
            <summary>
            Initializes a new instance of a KeyComparer.
            </summary>
        </member>
        <member name="M:NList.KeyComparer`1.Compare(`0,`0)">
            <summary>
            Compares the given values by key.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>
            An integer representing the relationship between the two values.
            Negative values indicate that the first value was less than the second.
            Positive values indicate that the first value was greater than the second.
            Zero indicates that the first and second values were equal.
            </returns>
        </member>
        <member name="M:NList.KeyComparer`1.OrderBy``1(System.Func{`0,``0})">
            <summary>
            Creates a new KeyComparer that sorts using the results of the key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">A function that selects a key.</param>
            <returns>A KeyComparer using the key selector.</returns>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
        </member>
        <member name="M:NList.KeyComparer`1.OrderBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a new KeyComparer that sorts using the results of the key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">A function that selects a key.</param>
            <param name="keyComparer">The comparer to use to compare keys.</param>
            <returns>A KeyComparer using the key selector.</returns>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key comparison delegate is null.</exception>
        </member>
        <member name="M:NList.KeyComparer`1.OrderBy``1(System.Func{`0,``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Creates a new KeyComparer that sorts using the results of the key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">A function that selects a key.</param>
            <param name="keyComparison">The comparison delegate to use to compare keys.</param>
            <returns>A KeyComparer using the key selector.</returns>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key comparison delegate is null.</exception>
        </member>
        <member name="M:NList.KeyComparer`1.OrderByDescending``1(System.Func{`0,``0})">
            <summary>
            Creates a new KeyComparer that sorts using the results of the key selector, in descending order.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">A function that selects a key.</param>
            <returns>A KeyComparer using the key selector.</returns>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
        </member>
        <member name="M:NList.KeyComparer`1.OrderByDescending``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a new KeyComparer that sorts using the results of the key selector, in descending order.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">A function that selects a key.</param>
            <param name="keyComparer">The comparer to use to compare keys.</param>
            <returns>A KeyComparer using the key selector.</returns>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key comparison delegate is null.</exception>
        </member>
        <member name="M:NList.KeyComparer`1.OrderByDescending``1(System.Func{`0,``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Creates a new KeyComparer that sorts using the results of the key selector, in descending order.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">A function that selects a key.</param>
            <param name="keyComparison">The comparison delegate to use to compare keys.</param>
            <returns>A KeyComparer using the key selector.</returns>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key comparison delegate is null.</exception>
        </member>
        <member name="T:NList.IMutableSublist`2">
            <summary>
            Creates a view into a list starting at an offset and containing a designated number of items, 
            allowing items to be set.
            </summary>
            <typeparam name="TList">The type of the list to wrap.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
        </member>
        <member name="T:NList.IReadOnlySublist`2">
            <summary>
            Creates a view into a list starting at an offset and containing a designated number of items,
            which does not allow modification of the items.
            </summary>
            <typeparam name="TList">The type of the underlying list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
        </member>
        <member name="M:NList.IReadOnlySublist`2.Nest(System.Int32)">
            <summary>
            Creates a new Sublist that acts as a splice into the Sublist, starting at the given offset.
            </summary>
            <param name="offset">The offset into the Sublist to start the new splice.</param>
            <returns>A new Sublist starting at the given offset into the Sublist, consisting of the remaining items.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bounds of the Sublist.</exception>
        </member>
        <member name="M:NList.IReadOnlySublist`2.Nest(System.Int32,System.Int32)">
            <summary>
            Creates a new Sublist that acts as a splice into the Sublist, starting at the given offset, spanning
            the number of items specified by the count.
            </summary>
            <param name="offset">The offset into the Sublist to start the new splice.</param>
            <param name="count">The number of items to include in the splice.</param>
            <returns>
            A new Sublist starting at the given offset into the Sublist, spanning the number of items specified by the count.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bounds of the Sublist.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The count is negative -or-  beyond the bounds of the Sublist.
            </exception>
        </member>
        <member name="P:NList.IReadOnlySublist`2.List">
            <summary>
            Gets the underlying list.
            </summary>
        </member>
        <member name="P:NList.IReadOnlySublist`2.Offset">
            <summary>
            Gets or sets the offset into the underlying list.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is negative -or- outside the bounds of the underlying list.
            </exception>
            <remarks>If Sublist's count is adjusted automatically to prevent the splice for going beyond the end of the list.</remarks>
        </member>
        <member name="P:NList.IReadOnlySublist`2.Count">
            <summary>
            Gets or sets the number of items to include in the Sublist.
            </summary>
        </member>
        <member name="P:NList.IReadOnlySublist`2.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name="index">The index into the Sublist to get the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- beyond the bounds of the list.</exception>
        </member>
        <member name="M:NList.IMutableSublist`2.Nest(System.Int32)">
            <summary>
            Creates a new Sublist that acts as a splice into the Sublist, starting at the given offset.
            </summary>
            <param name="offset">The offset into the Sublist to start the new splice.</param>
            <returns>A new Sublist starting at the given offset into the Sublist, consisting of the remaining items.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bounds of the Sublist.</exception>
        </member>
        <member name="M:NList.IMutableSublist`2.Nest(System.Int32,System.Int32)">
            <summary>
            Creates a new Sublist that acts as a splice into the Sublist, starting at the given offset, spanning
            the number of items specified by the count.
            </summary>
            <param name="offset">The offset into the Sublist to start the new splice.</param>
            <param name="count">The number of items to include in the splice.</param>
            <returns>
            A new Sublist starting at the given offset into the Sublist, spanning the number of items specified by the count.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bounds of the Sublist.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The count is negative -or-  beyond the bounds of the Sublist.
            </exception>
        </member>
        <member name="M:NList.IMutableSublist`2.IndexOf(`1)">
            <summary>
            Gets the index of the first occurrence of the given value.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>The index of the first occurrence of the given value -or- negative one if the value is not found.</returns>
            <remarks>The returned index is relative to Sublist, rather than the underlying list.</remarks>
        </member>
        <member name="P:NList.IMutableSublist`2.Item(System.Int32)">
            <summary>
            Gets or sets the item at the given index.
            </summary>
            <param name="index">The index into the Sublist to get the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- beyond the bounds of the list.</exception>
        </member>
        <member name="T:NList.Formatter">
            <summary>
            Allows for the generation of a string based on formatted template.
            </summary>
        </member>
        <member name="M:NList.Formatter.#ctor(System.String)">
            <summary>
            Initializes a new instance of a Formatter using the given format string.
            </summary>
            <param name="format">The string containing the placeholders to use as a template.</param>
            <exception cref="T:System.ArgumentNullException">The format string is null.</exception>
            <exception cref="T:System.FormatException">The format string is invald.</exception>
        </member>
        <member name="M:NList.Formatter.Format(System.String,System.Object)">
            <summary>
            Substitutes the placeholders in the format string with the values found in the object.
            </summary>
            <param name="format">The string containing the placeholders to use as a template.</param>
            <param name="value">The object to use to replace the placeholders.</param>
            <returns>The format string with the placeholders substituted for by the object values.</returns>
            <exception cref="T:System.ArgumentNullException">The format string is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">A property was not found in the value.</exception>
        </member>
        <member name="M:NList.Formatter.Format(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Substitutes the placeholders in the format string with the values found in the object.
            </summary>
            <param name="provider">The format provider to use -or- null to use the current culture.</param>
            <param name="format">The string containing the placeholders to use as a template.</param>
            <param name="value">The object to use to replace the placeholders.</param>
            <returns>The format string with the placeholders substituted for by the object values.</returns>
            <exception cref="T:System.ArgumentNullException">The format string is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">A property was not found in the value.</exception>
        </member>
        <member name="M:NList.Formatter.Format(System.Object)">
            <summary>
            Substitutes the placeholders in the format string with the values found in the given object.
            </summary>
            <param name="value">The object to use to replace the placeholders.</param>
            <returns>The format string with the placeholders substituted for by the lookup values.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">A property was not found in the object.</exception>
            <remarks>A null value will be replaced with an empty string.</remarks>
        </member>
        <member name="M:NList.Formatter.Format(System.IFormatProvider,System.Object)">
            <summary>
            Substitutes the placeholders in the format string with the values found in the given object.
            </summary>
            <param name="provider">The format provider to use -or- null to use the current culture.</param>
            <param name="value">The object to use to replace the placeholders.</param>
            <returns>The format string with the placeholders substituted for by the lookup values.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">A property was not found in the object.</exception>
            <remarks>A null value will be replaced with an empty string.</remarks>
        </member>
        <member name="T:NList.OrderedDictionary`2">
            <summary>
            Represents a dictionary that tracks the order that items were added.
            </summary>
            <typeparam name="TKey">The type of the dictionary keys.</typeparam>
            <typeparam name="TValue">The type of the dictionary values.</typeparam>
            <remarks>
            This dictionary makes it possible to get the index of a key and a key based on an index.
            It can be costly to find the index of a key because it must be searched for linearly.
            It can be costly to insert a key/value pair because other key's indexes must be adjusted.
            It can be costly to remove a key/value pair because other keys' indexes must be adjusted.
            </remarks>
        </member>
        <member name="M:NList.OrderedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of an OrderedDictionary.
            </summary>
        </member>
        <member name="M:NList.OrderedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of an OrderedDictionary.
            </summary>
            <param name="capacity">The initial capacity of the dictionary.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The capacity is less than zero.</exception>
        </member>
        <member name="M:NList.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of an OrderedDictionary.
            </summary>
            <param name="comparer">The equality comparer to use to compare keys.</param>
        </member>
        <member name="M:NList.OrderedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of an OrderedDictionary.
            </summary>
            <param name="capacity">The initial capacity of the dictionary.</param>
            <param name="comparer">The equality comparer to use to compare keys.</param>
        </member>
        <member name="M:NList.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds the given key/value pair to the dictionary.
            </summary>
            <param name="key">The key to add to the dictionary.</param>
            <param name="value">The value to associated with the key.</param>
            <exception cref="T:System.ArgumentException">The given key already exists in the dictionary.</exception>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
        </member>
        <member name="M:NList.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts the given key/value pair at the specified index.
            </summary>
            <param name="index">The index to insert the key/value pair.</param>
            <param name="key">The key to insert.</param>
            <param name="value">The value to insert.</param>
            <exception cref="T:System.ArgumentException">The given key already exists in the dictionary.</exception>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- larger than the size of the dictionary.</exception>
        </member>
        <member name="M:NList.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the given key exists in the dictionary.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>True if the key exists in the dictionary; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
        </member>
        <member name="M:NList.OrderedDictionary`2.GetKey(System.Int32)">
            <summary>
            Gets the key at the given index.
            </summary>
            <param name="index">The index of the key to get.</param>
            <returns>The key at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- larger than the number of keys.</exception>
        </member>
        <member name="M:NList.OrderedDictionary`2.IndexOf(`0)">
            <summary>
            Gets the index of the given key.
            </summary>
            <param name="key">The key to get the index of.</param>
            <returns>The index of the key in the dictionary -or- -1 if the key is not found.</returns>
            <remarks>The operation runs in O(n).</remarks>
        </member>
        <member name="M:NList.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the key/value pair with the given key from the dictionary.
            </summary>
            <param name="key">The key of the pair to remove.</param>
            <returns>True if the key was found and the pair removed; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
            <remarks>This operation runs in O(n).</remarks>
        </member>
        <member name="M:NList.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the key/value pair at the given index.
            </summary>
            <param name="index">The index of the key/value pair to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- larger than the size of the dictionary.</exception>
            <remarks>This operation runs in O(n).</remarks>
        </member>
        <member name="M:NList.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value associated with the given key. If the key is not found,
            default(TValue) value is stored in the value.
            </summary>
            <param name="key">The key to get the value for.</param>
            <param name="value">The value used to hold the results.</param>
            <returns>True if the key was found; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
        </member>
        <member name="M:NList.OrderedDictionary`2.Clear">
            <summary>
            Removes all key/value pairs from the dictionary.
            </summary>
        </member>
        <member name="M:NList.OrderedDictionary`2.GetEnumerator">
            <summary>
            Gets the key/value pairs in the dictionary in the order they were added.
            </summary>
            <returns>An enumerator over the key/value pairs in the dictionary.</returns>
        </member>
        <member name="P:NList.OrderedDictionary`2.Comparer">
            <summary>
            Gets the equality comparer used to compare keys.
            </summary>
        </member>
        <member name="P:NList.OrderedDictionary`2.Keys">
            <summary>
            Gets the keys in the dictionary in the order they were added.
            </summary>
        </member>
        <member name="P:NList.OrderedDictionary`2.Values">
            <summary>
            Gets the values in the dictionary.
            </summary>
        </member>
        <member name="P:NList.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the given index.
            </summary>
            <param name="index">The index of the value to get.</param>
            <returns>The value at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- beyond the length of the dictionary.</exception>
        </member>
        <member name="P:NList.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the given key.
            </summary>
            <param name="key">The key to get the associated value by or to associate with the value.</param>
            <returns>The value associated with the given key.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key is not in the dictionary.</exception>
        </member>
        <member name="P:NList.OrderedDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs in the dictionary.
            </summary>
        </member>
        <member name="T:NList.OrderedDictionary`2.KeyCollection">
            <summary>
            Wraps the keys in an OrderDictionary.
            </summary>
        </member>
        <member name="M:NList.OrderedDictionary`2.KeyCollection.#ctor(NList.OrderedDictionary{`0,`1})">
            <summary>
            Initializes a new instance of a KeyCollection.
            </summary>
            <param name="dictionary">The OrderedDictionary whose keys to wrap.</param>
            <exception cref="T:System.ArgumentNullException">The dictionary is null.</exception>
        </member>
        <member name="M:NList.OrderedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the keys from the OrderedDictionary to the given array, starting at the given index.
            </summary>
            <param name="array">The array to copy the keys to.</param>
            <param name="arrayIndex">The index into the array to start copying the keys.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The arrayIndex is negative.</exception>
            <exception cref="T:System.ArgumentException">The array, starting at the given index, is not large enough to contain all the keys.</exception>
        </member>
        <member name="M:NList.OrderedDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            Gets an enumerator over the keys in the OrderedDictionary.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:NList.OrderedDictionary`2.KeyCollection.Count">
            <summary>
            Gets the number of keys in the OrderedDictionary.
            </summary>
        </member>
        <member name="T:NList.OrderedDictionary`2.ValueCollection">
            <summary>
            Wraps the keys in an OrderDictionary.
            </summary>
        </member>
        <member name="M:NList.OrderedDictionary`2.ValueCollection.#ctor(NList.OrderedDictionary{`0,`1})">
            <summary>
            Initializes a new instance of a ValueCollection.
            </summary>
            <param name="dictionary">The OrderedDictionary whose keys to wrap.</param>
            <exception cref="T:System.ArgumentNullException">The dictionary is null.</exception>
        </member>
        <member name="M:NList.OrderedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the values from the OrderedDictionary to the given array, starting at the given index.
            </summary>
            <param name="array">The array to copy the values to.</param>
            <param name="arrayIndex">The index into the array to start copying the values.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The arrayIndex is negative.</exception>
            <exception cref="T:System.ArgumentException">The array, starting at the given index, is not large enough to contain all the values.</exception>
        </member>
        <member name="M:NList.OrderedDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            Gets an enumerator over the values in the OrderedDictionary.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:NList.OrderedDictionary`2.ValueCollection.Count">
            <summary>
            Gets the number of values in the OrderedDictionary.
            </summary>
        </member>
        <member name="T:NList.ReadOnlyDictionary">
            <summary>
            Provides methods for creating read-only dictionaries.
            </summary>
        </member>
        <member name="M:NList.ReadOnlyDictionary.ReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Wraps the given dictionary making it read-only.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
            <param name="dictionary">The dictionary to make read-only.</param>
            <returns>A new read-only dictionary wrapping the given dictionary.</returns>
            <exception cref="T:System.ArgumentNullException">The dictionary is null.</exception>
        </member>
        <member name="T:NList.ReadOnlyDictionary`2">
            <summary>
            Provides a view into a dictionary such that it can't be modified.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:NList.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of a ReadOnlyDictionary that wraps the given dictionary.
            </summary>
            <param name="dictionary">The dictionary to make read-only.</param>
            <exception cref="T:System.ArgumentNullException">The dictionary is null.</exception>
        </member>
        <member name="M:NList.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            Adds the key/value pair to the dictionary.
            </summary>
            <param name="key">The key to associated with the value.</param>
            <param name="value">The value to associate with the key.</param>
            <exception cref="T:System.NotSupportedException">Cannot add to a read-only dictionary.</exception>
        </member>
        <member name="M:NList.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the given key exists in the dictionary.
            </summary>
            <param name="key">The key to search for.</param>
            <returns>True if the key exists; otherwise, false.</returns>
        </member>
        <member name="M:NList.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            Removes the key/value pair with the given key, if it exists.
            </summary>
            <param name="key">The key of the pair to remove.</param>
            <returns>True if the pair was removed; otherwise, false.</returns>
            <exception cref="T:System.NotSupportedException">Cannot remove from a read-only dictionary.</exception>
        </member>
        <member name="M:NList.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value for the given key, storing it in the output variable if it exists.
            </summary>
            <param name="key">The key to get the value for.</param>
            <param name="value">The variable to store the value in, or the default value if it is not found.</param>
            <returns>True if the key is found and the value is set; otherwise, false.</returns>
        </member>
        <member name="M:NList.ReadOnlyDictionary`2.Clear">
            <summary>
            Removes all of the items from the dictionary.
            </summary>
            <exception cref="T:System.NotSupportedException">Cannot clear a read-only dictionary.</exception>
        </member>
        <member name="M:NList.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator over the key/value pairs in the dictionary.
            </summary>
            <returns>An enumerator over the key/value pairs.</returns>
        </member>
        <member name="P:NList.ReadOnlyDictionary`2.Dictionary">
            <summary>
            Gets the underlying dictionary.
            </summary>
        </member>
        <member name="P:NList.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets the keys in the dictionary.
            </summary>
        </member>
        <member name="P:NList.ReadOnlyDictionary`2.Values">
            <summary>
            Gets the values in the dictionary.
            </summary>
        </member>
        <member name="P:NList.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value associated with the given key.
            </summary>
            <param name="key">The key to get the value for.</param>
            <returns>The value associated with the key.</returns>
            <exception cref="T:System.ArgumentNullException">The key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The key was not in the dictionary.</exception>
        </member>
        <member name="P:NList.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs in the dictionary.
            </summary>
        </member>
        <member name="P:NList.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
            <summary>
            Gets whether the dictionary is read-only, which will always be true.
            </summary>
        </member>
        <member name="T:NList.ComparerExtensions">
            <summary>
            Provides methods for composing comparisons of a given type.
            </summary>
        </member>
        <member name="M:NList.ComparerExtensions.ThenBy``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Composes a comparer that performs subsequent ordering using the comparer.
            </summary>
            <typeparam name="T">The type being compared.</typeparam>
            <param name="baseComparer">The comparer to extend.</param>
            <param name="comparer">The comparer to use if two items compare as equal using the base comparer.</param>
            <returns>A comparer that performs comparisons using both comparison operations.</returns>
            <exception cref="T:System.ArgumentNullException">The base comparer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.ComparerExtensions.ThenBy``1(System.Collections.Generic.IComparer{``0},System.Func{``0,``0,System.Int32})">
            <summary>
            Composes a comparer that performs subsequent ordering using the comparison.
            </summary>
            <typeparam name="T">The type being compared.</typeparam>
            <param name="baseComparer">The comparer to extend.</param>
            <param name="comparison">The comparison to use if two items compare as equal using the base comparer.</param>
            <returns>A comparer that performs comparisons using both comparison operations.</returns>
            <exception cref="T:System.ArgumentNullException">The base comparer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.ComparerExtensions.ThenBy``2(System.Collections.Generic.IComparer{``0},System.Func{``0,``1})">
            <summary>
            Composes a comparer that performs subsequent ordering using the key comparison.
            </summary>
            <typeparam name="T">The type being compared.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="baseComparer">The comparer to extend.</param>
            <param name="keySelector">The key of the type to use for comparison.</param>
            <returns>A comparer that performs comparisons using both comparison operations.</returns>
            <exception cref="T:System.ArgumentNullException">The base comparer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
        </member>
        <member name="M:NList.ComparerExtensions.ThenBy``2(System.Collections.Generic.IComparer{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Composes a comparer that performs subsequent ordering using the key comparison.
            </summary>
            <typeparam name="T">The type being compared.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="baseComparer">The comparer to extend.</param>
            <param name="keySelector">The key of the type to use for comparison.</param>
            <param name="keyComparer">The comparer to use to compare the keys.</param>
            <returns>A comparer that performs comparisons using both comparison operations.</returns>
            <exception cref="T:System.ArgumentNullException">The base comparer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key comparison delegate is null.</exception>
        </member>
        <member name="M:NList.ComparerExtensions.ThenBy``2(System.Collections.Generic.IComparer{``0},System.Func{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Composes a comparer that performs subsequent ordering using the key comparison.
            </summary>
            <typeparam name="T">The type being compared.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="baseComparer">The comparer to extend.</param>
            <param name="keySelector">The key of the type to use for comparison.</param>
            <param name="keyComparison">The comparison delegate to use to compare the keys.</param>
            <returns>A comparer that performs comparisons using both comparison operations.</returns>
            <exception cref="T:System.ArgumentNullException">The base comparer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key comparison delegate is null.</exception>
        </member>
        <member name="M:NList.ComparerExtensions.ThenByDescending``2(System.Collections.Generic.IComparer{``0},System.Func{``0,``1})">
            <summary>
            Composes a comparer that performs subsequent ordering using the key comparison, in descending order.
            </summary>
            <typeparam name="T">The type being compared.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="baseComparer">The comparer to extend.</param>
            <param name="keySelector">The key of the type to use for comparison.</param>
            <returns>A comparer that performs comparisons using both comparison operations.</returns>
            <exception cref="T:System.ArgumentNullException">The base comparer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
        </member>
        <member name="M:NList.ComparerExtensions.ThenByDescending``2(System.Collections.Generic.IComparer{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Composes a comparer that performs subsequent ordering using the key comparison, in descending order.
            </summary>
            <typeparam name="T">The type being compared.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="baseComparer">The comparer to extend.</param>
            <param name="keySelector">The key of the type to use for comparison.</param>
            <param name="keyComparer">The comparer to use to compare the keys.</param>
            <returns>A comparer that performs comparisons using both comparison operations.</returns>
            <exception cref="T:System.ArgumentNullException">The base comparer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key comparison delegate is null.</exception>
        </member>
        <member name="M:NList.ComparerExtensions.ThenByDescending``2(System.Collections.Generic.IComparer{``0},System.Func{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Composes a comparer that performs subsequent ordering using the key comparison, in descending order.
            </summary>
            <typeparam name="T">The type being compared.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="baseComparer">The comparer to extend.</param>
            <param name="keySelector">The key of the type to use for comparison.</param>
            <param name="keyComparison">The comparison delegate to use to compare the keys.</param>
            <returns>A comparer that performs comparisons using both comparison operations.</returns>
            <exception cref="T:System.ArgumentNullException">The base comparer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key comparison delegate is null.</exception>
        </member>
        <member name="M:NList.ComparerExtensions.ToNullableComparer``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Extends a non-nullable comparer to work against nullable values by specifying
            nulls should be treated as the largest possible value.
            </summary>
            <typeparam name="T">The non-nullable type being compared by the base comparer.</typeparam>
            <param name="baseComparer">The comparer used to compare non-nullable values.</param>
            <returns>A new comparer capable of comparing a nullable version fo the value type.</returns>
            <exception cref="T:System.ArgumentNullException">The base comparer is null.</exception>
        </member>
        <member name="M:NList.ComparerExtensions.NullsFirst``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Extends a comparer such that null values are handled up-front by treating them
            as the smallest possible value.
            </summary>
            <typeparam name="T">The type of the values being compared.</typeparam>
            <param name="baseComparer">The comparer to extend to handle nulls.</param>
            <returns>A new comparer that treats nulls as the smallest possible value.</returns>
            <exception cref="T:System.ArgumentNullException">The base comparer is null.</exception>
            <remarks>The returned comparer is guaranteed to never pass a null value to the given base comparer.</remarks>
        </member>
        <member name="M:NList.ComparerExtensions.NullsLast``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Extends a comparer such that null values are handled up-front by treating them
            as the largest possible value.
            </summary>
            <typeparam name="T">The type of the values being compared.</typeparam>
            <param name="baseComparer">The comparer to extend to handle nulls.</param>
            <returns>A new comparer that treats nulls as the largest possible value.</returns>
            <exception cref="T:System.ArgumentNullException">The base comparer is null.</exception>
            <remarks>The returned comparer is guaranteed to never pass a null value to the given base comparer.</remarks>
        </member>
        <member name="M:NList.ComparerExtensions.NullsFirst``2(System.Collections.Generic.IComparer{``0},System.Func{``0,``1})">
            <summary>
            Extends a comparer such that null values are handled up-front by treating them
            as the smallest possible value.
            </summary>
            <typeparam name="T">The type of the values being compared.</typeparam>
            <typeparam name="TKey">The type of the key returned by the selector.</typeparam>
            <param name="baseComparer">The comparer to extend to handle nulls.</param>
            <param name="keySelector">Returns the key that will be inspected for null values.</param>
            <returns>A new comparer that treats nulls as the smallest possible value.</returns>
            <exception cref="T:System.ArgumentNullException">The base comparer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <remarks>The returned comparer is guaranteed to never pass a null value to the given base comparer.</remarks>
        </member>
        <member name="M:NList.ComparerExtensions.NullsLast``2(System.Collections.Generic.IComparer{``0},System.Func{``0,``1})">
            <summary>
            Extends a comparer such that null values are handled up-front by treating them
            as the largest possible value.
            </summary>
            <typeparam name="T">The type of the values being compared.</typeparam>
            <typeparam name="TKey">The type of the key returned by the selector.</typeparam>
            <param name="baseComparer">The comparer to extend to handle nulls.</param>
            <param name="keySelector">Returns the key that will be inspected for null values.</param>
            <returns>A new comparer that treats nulls as the largest possible value.</returns>
            <exception cref="T:System.ArgumentNullException">The base comparer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <remarks>The returned comparer is guaranteed to never pass a null value to the given base comparer.</remarks>
        </member>
        <member name="M:NList.ComparerExtensions.Reversed``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Creates a comparer that reverses the results of the comparer.
            </summary>
            <typeparam name="T">The type being compared.</typeparam>
            <param name="comparer">The comparer to reverse.</param>
            <returns>A comparer that reverses the results of the comparer.</returns>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.ComparerExtensions.Typed``1(System.Collections.IComparer)">
            <summary>
            Makes a typed comparer from the given comparer.
            </summary>
            <typeparam name="T">The type of items the comparer should compare.</typeparam>
            <param name="comparer">The comparer to convert to a typed comparer.</param>
            <returns>A typed comparer.</returns>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.ComparerExtensions.Untyped``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Makes an un-typed comparer from the given comparer.
            </summary>
            <typeparam name="T">The type that the given comparer compares.</typeparam>
            <param name="comparer">The comparer to make un-typed.</param>
            <returns>The untyped comparer.</returns>
        </member>
        <member name="M:NList.ComparerExtensions.ToComparer``1(System.Func{``0,``0,System.Int32})">
            <summary>
            Converts the given comparison function to a comparer object.
            </summary>
            <typeparam name="T">The type of the items that are compared.</typeparam>
            <param name="comparison">The comparison function to convert.</param>
            <returns>A new comparer that wraps the comparison function.</returns>
            <exception cref="T:System.ArgumentNullException">The comparison function is null.</exception>
        </member>
        <member name="T:NList.IExpandableSublist`2">
            <summary>
            Creates a view into a list starting at an offset and containing a designated number of items.
            </summary>
            <typeparam name="TList">The type of the list to wrap.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
        </member>
        <member name="M:NList.IExpandableSublist`2.Nest(System.Int32)">
            <summary>
            Creates a new Sublist that acts as a splice into the Sublist, starting at the given offset.
            </summary>
            <param name="offset">The offset into the Sublist to start the new splice.</param>
            <returns>A new Sublist starting at the given offset into the Sublist, consisting of the remaining items.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bounds of the Sublist.</exception>
        </member>
        <member name="M:NList.IExpandableSublist`2.Nest(System.Int32,System.Int32)">
            <summary>
            Creates a new Sublist that acts as a splice into the Sublist, starting at the given offset, spanning
            the number of items specified by the count.
            </summary>
            <param name="offset">The offset into the Sublist to start the new splice.</param>
            <param name="count">The number of items to include in the splice.</param>
            <returns>
            A new Sublist starting at the given offset into the Sublist, spanning the number of items specified by the count.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bounds of the Sublist.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The count is negative -or-  beyond the bounds of the Sublist.
            </exception>
        </member>
        <member name="P:NList.IExpandableSublist`2.Count">
            <summary>
            Gets or sets the number of items to include in the Sublist.
            </summary>
        </member>
        <member name="P:NList.IExpandableSublist`2.Item(System.Int32)">
            <summary>
            Gets or sets the item at the given index.
            </summary>
            <param name="index">The index into the Sublist to get the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- beyond the bounds of the list.</exception>
        </member>
        <member name="T:NList.StringExtensions">
            <summary>
            Provides methods for creating instances of Substring.
            </summary>
        </member>
        <member name="M:NList.StringExtensions.ToSubstring(System.String)">
            <summary>
            Wraps the given string such that the entirety of the string is visible.
            </summary>
            <param name="value">The value to wrap.</param>
            <returns>A Substring wrapping the given string.</returns>
        </member>
        <member name="M:NList.StringExtensions.ToSubstring(System.String,System.Int32)">
            <summary>
            Wraps the given string such that the first character starts at the given offset and contains the remaining characters.
            </summary>
            <param name="value">The string to wrap.</param>
            <param name="offset">The starting index into the string to create the view.</param>
            <returns>A Substring wrapping the given string.</returns>
        </member>
        <member name="M:NList.StringExtensions.ToSubstring(System.String,System.Int32,System.Int32)">
            <summary>
            Wraps the given string such that the first character starts at the given offset and contains the number of characters
            specified by the count.
            </summary>
            <param name="value">The string to wrap.</param>
            <param name="offset">The starting index into the string to create the view.</param>
            <param name="count">The number of characters to include in the view.</param>
            <returns>A Substring wrapping the given string.</returns>
        </member>
        <member name="T:NList.Substring">
            <summary>
            Creates a view into a string starting at an offset and containing the designated number of characters.
            </summary>
        </member>
        <member name="M:NList.Substring.#ctor(System.String)">
            <summary>
            Initializes a new instance of a Substring representing a splice containing the entire string.
            </summary>
            <param name="value">The string to wrap</param>
            <exception cref="T:System.ArgumentNullException">The string is null.</exception>
        </member>
        <member name="M:NList.Substring.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of a Substring representing a splice starting at the given offset and containing
            the remaining items.
            </summary>
            <param name="value">The string to wrap.</param>
            <param name="offset">The index into the string to treat as the start of the splice.</param>
            <exception cref="T:System.ArgumentNullException">The string is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bounds of the string.</exception>
        </member>
        <member name="M:NList.Substring.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a Substring representing a splice starting at the given offset and containing
            count characters.
            </summary>
            <param name="value">The string to wrap.</param>
            <param name="offset">The index into the list to treat as the start of the splice.</param>
            <param name="count">The number of items to include in the splice.</param>
            <exception cref="T:System.ArgumentNullException">The string is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bound of the string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count is greater than the remaining items in the string.</exception>
        </member>
        <member name="M:NList.Substring.Nest(System.Int32)">
            <summary>
            Creates a new Substring that acts as a splice into the Substring, starting at the given offset.
            </summary>
            <param name="offset">The offset into the Substring to start the new splice.</param>
            <returns>A new Substring starting at the given offset into the Sublist, consisting of the remaining items.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bounds of the Substring.</exception>
        </member>
        <member name="M:NList.Substring.Nest(System.Int32,System.Int32)">
            <summary>
            Creates a new Substring that acts as a splice into the Substring, starting at the given offset, spanning
            the number of characters specified by the count.
            </summary>
            <param name="offset">The offset into the Substring to start the new splice.</param>
            <param name="count">The number of characters to include in the splice.</param>
            <returns>
            A new Substring starting at the given offset into the Substring, spanning the number of characters specified by the count.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bounds of the Substring.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count is negative -or-  beyond the bounds of the StringString.</exception>
        </member>
        <member name="M:NList.Substring.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the string.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:NList.Substring.ToString">
            <summary>
            Gets the string representation of the Substring.
            </summary>
            <returns>The substring.</returns>
        </member>
        <member name="M:NList.Substring.op_Implicit(System.String)~NList.Substring">
            <summary>
            Implicitly creates a new instance of a Substring spanning the entirety of a string.
            </summary>
            <param name="value">The string to wrap with a Substring.</param>
            <returns>A new instance of a Substring.</returns>
        </member>
        <member name="P:NList.Substring.Value">
            <summary>
            Gets the underlying string.
            </summary>
        </member>
        <member name="P:NList.Substring.Offset">
            <summary>
            Gets or sets the offset into the underlying string.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is negative -or- outside the bounds of the underlying string.
            </exception>
            <remarks>The Substring's count is adjusted automatically to prevent the splice from going beyond the end of the string.</remarks>
        </member>
        <member name="P:NList.Substring.Count">
            <summary>
            Gets or sets the number of items to include in the Sublist.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is negative -or- outside the bounds of the underlying string.
            </exception>
        </member>
        <member name="P:NList.Substring.Item(System.Int32)">
            <summary>
            Gets the character at the given index.
            </summary>
            <param name="index">The index into the Substring to get the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- beyond the bounds of the string.</exception>
        </member>
        <member name="T:NList.StringList">
            <summary>
            Presents a string as a read-only list. This class is for internal implementation purposes
            and cannot be instantiated.
            </summary>
        </member>
        <member name="M:NList.StringList.#ctor(System.String)">
            <summary>
            Initializes a new instance of a StringList for the given string.
            </summary>
            <param name="value">The string value to wrap.</param>
        </member>
        <member name="M:NList.StringList.IndexOf(System.Char)">
            <summary>
            Finds the index of first occurrence of the given character.
            </summary>
            <param name="item">The character to find.</param>
            <returns>The index of the first occurrence of the given character -or- -1 if it cannot be found.</returns>
        </member>
        <member name="M:NList.StringList.Contains(System.Char)">
            <summary>
            Determines whether the string contains the given character.
            </summary>
            <param name="item">The character to check for.</param>
            <returns>True if the character exists within the string; otherwise, false.</returns>
        </member>
        <member name="M:NList.StringList.CopyTo(System.Char[],System.Int32)">
            <summary>
            Copies the characters in the string to the given array, starting at the given index.
            </summary>
            <param name="array">The array to copy the characters to.</param>
            <param name="arrayIndex">The index into the array to start copying the characters.</param>
        </member>
        <member name="M:NList.StringList.GetEnumerator">
            <summary>
            Gets an enumerator over the characters in the string.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:NList.StringList.Value">
            <summary>
            Gets the underlying string value.
            </summary>
        </member>
        <member name="P:NList.StringList.Item(System.Int32)">
            <summary>
            Gets the character at the given index.
            </summary>
            <param name="index">The index of the character to get.</param>
            <returns>The character at the given index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index is outside the bounds of the string.</exception>
        </member>
        <member name="P:NList.StringList.Count">
            <summary>
            Gets the length of the string.
            </summary>
        </member>
        <member name="T:NList.ReadOnlySet">
            <summary>
            Provides methods for creating read-only sets.
            </summary>
        </member>
        <member name="M:NList.ReadOnlySet.ReadOnly``1(System.Collections.Generic.ISet{``0})">
            <summary>
            Wraps the given set making it read-only.
            </summary>
            <typeparam name="T">The type of the items in the set.</typeparam>
            <param name="set">The set to make read-only.</param>
            <returns>A new read-only set wrapping the given set.</returns>
            <exception cref="T:System.ArgumentNullException">The set is null.</exception>
        </member>
        <member name="T:NList.ReadOnlySet`1">
            <summary>
            Provides a view into a set such that it can't be modified.
            </summary>
            <typeparam name="T">The type of items in the set.</typeparam>
        </member>
        <member name="M:NList.ReadOnlySet`1.#ctor(System.Collections.Generic.ISet{`0})">
            <summary>
            Initializes a new instance of a ReadOnlySet that wraps the given set.
            </summary>
            <param name="set">The set to make read-only.</param>
            <exception cref="T:System.ArgumentNullException">The set is null.</exception>
        </member>
        <member name="M:NList.ReadOnlySet`1.Add(`0)">
            <summary>
            Adds the item to the set, if it doesn't already exist.
            </summary>
            <param name="item">The item to add.</param>
            <returns>True if the item was added; otherwise, false, if the item already existed.</returns>
            <exception cref="T:System.NotSupportedException">Cannot add to a read-only set.</exception>
        </member>
        <member name="M:NList.ReadOnlySet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the items from the set that exist in the given collection.
            </summary>
            <param name="other">The items to remove from the set.</param>
            <exception cref="T:System.NotSupportedException">Cannot remove items from a read-only set.</exception>
        </member>
        <member name="M:NList.ReadOnlySet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the items that do not appear in both the set and the given collection.
            </summary>
            <param name="other">The items to intersect with the set.</param>
            <exception cref="T:System.NotSupportedException">Cannot remove items from a read-only set.</exception>
        </member>
        <member name="M:NList.ReadOnlySet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set has all of the items in the given collection
            and that the set is not equal to the other collection.
            </summary>
            <param name="other">The collection to compare against.</param>
            <returns>True if the set if a proper subset of the given collection; otherwise, false.</returns>
        </member>
        <member name="M:NList.ReadOnlySet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the given collection has all of the items in the set
            and that the given collection is not equal to the set.
            </summary>
            <param name="other">The collection to compare against.</param>
            <returns>True if the set is a proper superset of the given collection; otherwise, false.</returns>
        </member>
        <member name="M:NList.ReadOnlySet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the set has all of the items in the give collection.
            </summary>
            <param name="other">The collection to compare against.</param>
            <returns>True if the set is a subset of the given collection; otherwise, false.</returns>
        </member>
        <member name="M:NList.ReadOnlySet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the given collection has all of the items in the set.
            </summary>
            <param name="other">The collection to compare against.</param>
            <returns>True if the set is a superset of the given collection; otherwise, false.</returns>
        </member>
        <member name="M:NList.ReadOnlySet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the given collection shares any items with the set.
            </summary>
            <param name="other">The collection to compare against.</param>
            <returns>True if any items in the given collection are in the set; otherwise, false.</returns>
        </member>
        <member name="M:NList.ReadOnlySet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Determines whether the given collection has the same items as the set.
            </summary>
            <param name="other">The collection to compare against.</param>
            <returns>True if the given collection has the same items as the set; otherwise, false.</returns>
        </member>
        <member name="M:NList.ReadOnlySet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes any items that appear in both the set and the given collection.
            </summary>
            <param name="other">The items to perform the set symmetic difference with.</param>
            <exception cref="T:System.NotSupportedException">Cannot remove items from a read-only set.</exception>
        </member>
        <member name="M:NList.ReadOnlySet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds any items in the given collection to the set that are not already present.
            </summary>
            <param name="other">The items to union the set with.</param>
            <exception cref="T:System.NotSupportedException">Cannot add items to a read-only set.</exception>
        </member>
        <member name="M:NList.ReadOnlySet`1.Clear">
            <summary>
            Removes all the items from the set.
            </summary>
            <exception cref="T:System.NotSupportedException">Cannot remove items from a read-only set.</exception>
        </member>
        <member name="M:NList.ReadOnlySet`1.Contains(`0)">
            <summary>
            Determines whether the given item exists in the set.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>True if the item is in the set; otherwise, false.</returns>
        </member>
        <member name="M:NList.ReadOnlySet`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items in the set to the given array, starting at the given index.
            </summary>
            <param name="array">The array to copy the items to.</param>
            <param name="arrayIndex">The index into the array to begin copying.</param>
        </member>
        <member name="M:NList.ReadOnlySet`1.Remove(`0)">
            <summary>
            Removes the item from the set.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
            <exception cref="T:System.NotSupportedException">Cannot remove items from a read-only set.</exception>
        </member>
        <member name="M:NList.ReadOnlySet`1.GetEnumerator">
            <summary>
            Gets an enumerator over the items in the set.
            </summary>
            <returns>An enumerator over the items in the set.</returns>
        </member>
        <member name="P:NList.ReadOnlySet`1.Set">
            <summary>
            Gets the underlying set.
            </summary>
        </member>
        <member name="P:NList.ReadOnlySet`1.Count">
            <summary>
            Gets the number of items in the set.
            </summary>
        </member>
        <member name="P:NList.ReadOnlySet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Determines whether the set is read-only.
            </summary>
        </member>
        <member name="T:NList.BinarySearchResult">
            <summary>
            Holds the results of the BinarySearch methods.
            </summary>
        </member>
        <member name="M:NList.BinarySearchResult.#ctor">
            <summary>
            Initializes a new instance of a BinarySearchResult.
            </summary>
        </member>
        <member name="M:NList.BinarySearchResult.op_Implicit(NList.BinarySearchResult)~System.Boolean">
            <summary>
            Implicitly converts the result to a boolean, representing whether the search value was found
            by the BinarySearch algorithm.
            </summary>
            <param name="result">The BinarySearchResult to convert.</param>
            <returns>True if the given BinarySearchResult indicates that the value was found; otherwise, false.</returns>
        </member>
        <member name="M:NList.BinarySearchResult.op_Implicit(NList.BinarySearchResult)~System.Int32">
            <summary>
            Implicitly converts the result to an integer, representing the first index of the value, if it exists, 
            or where it would belong, if it does not exist.
            </summary>
            <param name="result">The BinarySearchResult to convert.</param>
            <returns>True if the given BinarySearchResult indicates that the value was found; otherwise, false.</returns>
        </member>
        <member name="M:NList.BinarySearchResult.ToString">
            <summary>
            Gets the string representation of the result.
            </summary>
            <returns>The string representation of the result.</returns>
        </member>
        <member name="P:NList.BinarySearchResult.Index">
            <summary>
            Gets the first index where the search value was found, if it exists, or belongs, if it does not exist.
            </summary>
        </member>
        <member name="P:NList.BinarySearchResult.Exists">
            <summary>
            Gets whether the value was found in the list.
            </summary>
        </member>
        <member name="T:NList.CopyResult">
            <summary>
            Holds the results of a copy method with one source list.
            </summary>
        </member>
        <member name="M:NList.CopyResult.#ctor">
            <summary>
            Initializes a new instance of a CopyResult.
            </summary>
        </member>
        <member name="M:NList.CopyResult.op_Implicit(NList.CopyResult)~System.Int32">
            <summary>
            Converts the result object into the destination offset.
            </summary>
            <param name="result">The result to convert.</param>
            <returns>The offset into the destination where the algorithm stopped.</returns>
        </member>
        <member name="P:NList.CopyResult.SourceOffset">
            <summary>
            Gets the index into the source list where the algorithm stopped.
            </summary>
        </member>
        <member name="P:NList.CopyResult.DestinationOffset">
            <summary>
            Gets the index into the destination list where the algorithm stopped.
            </summary>
        </member>
        <member name="T:NList.CopyTwoSourcesResult">
            <summary>
            Holds the results of a copy operation with two source lists.
            </summary>
        </member>
        <member name="M:NList.CopyTwoSourcesResult.#ctor">
            <summary>
            Initializes a new instance of a CopyTwoSourcesResult.
            </summary>
        </member>
        <member name="M:NList.CopyTwoSourcesResult.op_Implicit(NList.CopyTwoSourcesResult)~System.Int32">
            <summary>
            Converts the result object into the destination offset.
            </summary>
            <param name="result">The result to convert.</param>
            <returns>The offset into the destination where the algorithm stopped.</returns>
        </member>
        <member name="P:NList.CopyTwoSourcesResult.SourceOffset1">
            <summary>
            Gets the index into the first source list where the algorithm stopped.
            </summary>
        </member>
        <member name="P:NList.CopyTwoSourcesResult.SourceOffset2">
            <summary>
            Gets the index into the second source list where the algorithm stopped.
            </summary>
        </member>
        <member name="P:NList.CopyTwoSourcesResult.DestinationOffset">
            <summary>
            Gets the index into the destination list where the algorithm stopped.
            </summary>
        </member>
        <member name="T:NList.CopyPartitionedResult">
            <summary>
            Holds the indexes of a copy method with two destination lists.
            </summary>
        </member>
        <member name="M:NList.CopyPartitionedResult.#ctor">
            <summary>
            Initializes a new instance of a CopyPartitionedResult.
            </summary>
        </member>
        <member name="P:NList.CopyPartitionedResult.SourceOffset">
            <summary>
            Gets the index into the source list where the items stopped being copied.
            </summary>
        </member>
        <member name="P:NList.CopyPartitionedResult.DestinationOffset1">
            <summary>
            Gets the index into the first destination list.
            </summary>
        </member>
        <member name="P:NList.CopyPartitionedResult.DestinationOffset2">
            <summary>
            Gets the index into the second destination list.
            </summary>
        </member>
        <member name="T:NList.LowerAndUpperBoundResult">
            <summary>
            Holds the results of the LowerAndUpperBound methods.
            </summary>
        </member>
        <member name="M:NList.LowerAndUpperBoundResult.#ctor">
            <summary>
            Initializes a new instance of a LowerAndUpperBoundResult.
            </summary>
        </member>
        <member name="M:NList.LowerAndUpperBoundResult.ToString">
            <summary>
            Gets the string representation of the result.
            </summary>
            <returns>The string representation of the result.</returns>
        </member>
        <member name="P:NList.LowerAndUpperBoundResult.LowerBound">
            <summary>
            Gets the lower bound of the value.
            </summary>
        </member>
        <member name="P:NList.LowerAndUpperBoundResult.UpperBound">
            <summary>
            Gets the upper bound of the value.
            </summary>
        </member>
        <member name="T:NList.MinimumMaximumResult">
            <summary>
            Holds the results of the MinimumMaximum methods.
            </summary>
        </member>
        <member name="M:NList.MinimumMaximumResult.#ctor">
            <summary>
            Initializes a new instance of a MinimumMaximumResult.
            </summary>
        </member>
        <member name="M:NList.MinimumMaximumResult.ToString">
            <summary>
            Gets the string representation of the result.
            </summary>
            <returns>The string representation of the result.</returns>
        </member>
        <member name="P:NList.MinimumMaximumResult.MinimumIndex">
            <summary>
            Gets the index of the minimum item in a list.
            </summary>
        </member>
        <member name="P:NList.MinimumMaximumResult.MaximumIndex">
            <summary>
            Gets the index of the maximum item in a list.
            </summary>
        </member>
        <member name="T:NList.List">
            <summary>
            Provides algorithms for working with instances of <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
        </member>
        <member name="M:NList.List.Add``3(NList.IReadOnlySublist{``0,``2},NList.IExpandableSublist{``1,``2})">
            <summary>
            Adds the items from a list onto a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list of items to add.</param>
            <param name="destination">The list to add the items to.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <remarks>
            The destination Sublist is resized as necessary to hold the added items.
            </remarks>
        </member>
        <member name="M:NList.List.Add``2(System.Collections.Generic.IEnumerable{``1},NList.IExpandableSublist{``0,``1})">
            <summary>
            Adds the items in the source collection to the end of the destination list.
            </summary>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the collections.</typeparam>
            <param name="source">The items to add to the destination.</param>
            <param name="destination">The list to add the items to.</param>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
        </member>
        <member name="M:NList.List.AddCombined``6(NList.IReadOnlySublist{``0,``1},NList.IReadOnlySublist{``2,``3},NList.IExpandableSublist{``4,``5},System.Func{``1,``3,``5})">
            <summary>
            Combines the items from two lists and adds the results to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="T1">The type of the items in the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="T2">The type of the items in the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="TDest">The type of the items in the destination list.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The destination list.</param>
            <param name="combiner">A delegate used to combine the items from the first and second lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The combiner delegate is null.</exception>
            <remarks>
            The destination Sublist is resized as necessary to hold the added items.
            </remarks>
        </member>
        <member name="M:NList.List.AddConverted``4(NList.IReadOnlySublist{``0,``1},NList.IExpandableSublist{``2,``3})">
            <summary>
            Converts items from a list and adds the results to a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="TDestination">The type of the items in the destination list.</typeparam>
            <param name="source">The list of items to convert.</param>
            <param name="destination">The list to add the converted items to.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.InvalidCastException">
            This conversion is not supported 
            -or- a value is null and TDestination is a value type 
            -or- a value does not implement the System.IConvertible interface.
            </exception>
            <exception cref="T:System.FormatException">A value is not in a format recognized by the format provider.</exception>
            <exception cref="T:System.OverflowException">A value represents a number that is out of the range of TDest.</exception>
            <remarks>
            Conversion will take place using the <see cref="M:NList.Utilities.Convert``2(``0)"/> method. The destination Sublist
            is resized as necessary to hold the added items.
            </remarks>
        </member>
        <member name="M:NList.List.AddConverted``4(NList.IReadOnlySublist{``0,``1},NList.IExpandableSublist{``2,``3},System.Func{``1,``3})">
            <summary>
            Converts items from a list and adds the results to a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="TDest">The type of the items in the destination list.</typeparam>
            <param name="source">The list of items to convert.</param>
            <param name="destination">The list to add the converted items to.</param>
            <param name="converter">The conversion delegate to convert instances of T to TDest.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
        </member>
        <member name="M:NList.List.AddDifference``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3})">
            <summary>
            Adds the items from the first list that are not in a second list to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The destination list.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <remarks>
            The first and second lists must be sorted the same and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.AddDifference``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3},System.Collections.Generic.IComparer{``3})">
            <summary>
            Adds the items from the first list that are not in a second list to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The destination list.</param>
            <param name="comparer">The comparer to use for comparing items in the lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparer and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.AddDifference``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3},System.Func{``3,``3,System.Int32})">
            <summary>
            Adds the items from the first list that are not in a second list to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The destination list.</param>
            <param name="comparison">The comparison delegate used for comparing items in the lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparison delegate and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.AddIf``3(NList.IReadOnlySublist{``0,``2},NList.IExpandableSublist{``1,``2},System.Func{``2,System.Boolean})">
            <summary>
            Adds the items from a list that satisfy the predicate to a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list of items to conditionally add.</param>
            <param name="destination">The list to add the items to.</param>
            <param name="predicate">The condition an item must satisfy to be added to the destination.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:NList.List.AddIntersection``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3})">
            <summary>
            Adds the items that appear in both lists to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to add the intersecting items to.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <remarks>
            The items in the lists must be sorted according to the default ordering of the items. Neither of
            the lists can contain duplicate items.
            </remarks>
        </member>
        <member name="M:NList.List.AddIntersection``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3},System.Collections.Generic.IComparer{``3})">
            <summary>
            Adds the items that appear in both lists to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to add the intersecting items to.</param>
            <param name="comparer">The comparer to use to compare items from the first and second lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparer and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.AddIntersection``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3},System.Func{``3,``3,System.Int32})">
            <summary>
            Adds the items that appear in both lists to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to add the intersecting items to.</param>
            <param name="comparison">The delegate used to compare items from the first and second lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparison delegate and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.AddMerged``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3})">
            <summary>
            Merges the items from two lists such that they remain in sorted order, adding the items
            to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list to merge.</param>
            <param name="source2">The second list to merge.</param>
            <param name="destination">The list to add the merged items to.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <remarks>
            The items in the lists must be sorted according to the default ordering of the items.
            </remarks>
        </member>
        <member name="M:NList.List.AddMerged``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3},System.Collections.Generic.IComparer{``3})">
            <summary>
            Merges the items from two lists such that they remain in sorted order, adding the items
            to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list to merge.</param>
            <param name="source2">The second list to merge.</param>
            <param name="destination">The list to add the merged items to.</param>
            <param name="comparer">The comparer to use to compare items from the lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparer.
            </remarks>
        </member>
        <member name="M:NList.List.AddMerged``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3},System.Func{``3,``3,System.Int32})">
            <summary>
            Merges the items from two lists such that they remain in sorted order, adding the items
            to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list to merge.</param>
            <param name="source2">The second list to merge.</param>
            <param name="destination">The list to add the merged items to.</param>
            <param name="comparison">The delegate to use to compare items from the lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparison delegate.
            </remarks>
        </member>
        <member name="M:NList.List.AddPartiallySorted``3(NList.IReadOnlySublist{``0,``2},System.Int32,NList.IExpandableSublist{``1,``2})">
            <summary>
            Adds the given number of items from a list to a destination list as if the source list was sorted.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list of items to be added.</param>
            <param name="numberOfItems">The number of items to add to the destination.</param>
            <param name="destination">The list to add the items to.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified number of items is larger than the source list.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <remarks>
            The items in the list will be sorted according to the default ordering of the items.
            </remarks>
        </member>
        <member name="M:NList.List.AddPartiallySorted``3(NList.IReadOnlySublist{``0,``2},System.Int32,NList.IExpandableSublist{``1,``2},System.Collections.Generic.IComparer{``2})">
            <summary>
            Adds the given number of items from a list to a destination list as if the source list was sorted.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list of items to be added.</param>
            <param name="numberOfItems">The number of items to add to the destination.</param>
            <param name="destination">The list to add the items to.</param>
            <param name="comparer">The comparer to use to compare items in the source list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified number of items is larger than the source list.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
        </member>
        <member name="M:NList.List.AddPartiallySorted``3(NList.IReadOnlySublist{``0,``2},System.Int32,NList.IExpandableSublist{``1,``2},System.Func{``2,``2,System.Int32})">
            <summary>
            Adds the given number of items from a list to a destination list as if the source list was sorted.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list of items to be added.</param>
            <param name="numberOfItems">The number of items to add to the destination.</param>
            <param name="destination">The list to add the items to.</param>
            <param name="comparison">The delegate used to compare items in the source list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified number of items is larger than the source list.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
        </member>
        <member name="M:NList.List.AddPartitioned``4(NList.IReadOnlySublist{``0,``3},NList.IExpandableSublist{``1,``3},NList.IExpandableSublist{``2,``3},System.Func{``3,System.Boolean})">
            <summary>
            Adds the items from a list satisfying the predicate to the first destination list and the remaining
            to the second destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList1">The type of the first destination list.</typeparam>
            <typeparam name="TDestinationList2">The type of the second destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list to partition.</param>
            <param name="destination1">The list to add the items that satisfy the predicate.</param>
            <param name="destination2">The list to add the items that don't satisfy the predicate.</param>
            <param name="predicate">The condition an item must satisfy to be added to the first destination list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The first destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:NList.List.AddRandomSamples``3(NList.IReadOnlySublist{``0,``2},System.Int32,NList.IExpandableSublist{``1,``2},System.Random)">
            <summary>
            Randomly adds the requested number of items from a list to a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="source">The list of items to randomly choose values from.</param>
            <param name="numberOfSamples">The number of items to add to the destination.</param>
            <param name="destination">The list to add items to.</param>
            <param name="random">The random number generator to use.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of samples is negative -or- larger than the size of the list.
            </exception>
            <exception cref="T:System.ArgumentNullException">The random number generator is null.</exception>
            <remarks>The order that the items appear in the destination is not guaranteed.</remarks>
        </member>
        <member name="M:NList.List.AddRandomSamples``3(NList.IReadOnlySublist{``0,``2},System.Int32,NList.IExpandableSublist{``1,``2},System.Func{System.Int32})">
            <summary>
            Randomly adds the requested number of items from a list to a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="source">The list of items to randomly choose values from.</param>
            <param name="numberOfSamples">The number of items to add to the destination.</param>
            <param name="destination">The list to add items to.</param>
            <param name="generator">The random number generator to use.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of samples is negative -or- larger than the size of the list.
            </exception>
            <exception cref="T:System.ArgumentNullException">The random number generator is null.</exception>
            <remarks>The order that the items appear in the destination is not guaranteed.</remarks>
        </member>
        <member name="M:NList.List.AddReplaced``3(NList.IReadOnlySublist{``0,``2},NList.IExpandableSublist{``1,``2},System.Func{``2,System.Boolean},``2)">
            <summary>
            Adds the items from a list to a destination list, replacing any items satisfying the predicate with the given value.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list of items to add.</param>
            <param name="destination">The list to add the items to.</param>
            <param name="predicate">The condition an item must satisfy to be replaced.</param>
            <param name="replacement">The value to replace items satisfying the predicate with.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:NList.List.AddReplaced``3(NList.IReadOnlySublist{``0,``2},NList.IExpandableSublist{``1,``2},System.Func{``2,System.Boolean},System.Func{``2,``2})">
            <summary>
            Adds the items from a list to a destination list, replacing any items satisfying the predicate with the result of the generator.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list of items to add.</param>
            <param name="destination">The list to add the items to.</param>
            <param name="predicate">The condition an item must satisfy to be replaced.</param>
            <param name="generator">The delegate to use to generate the replacements.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The generator is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:NList.List.AddReversed``3(NList.IReadOnlySublist{``0,``2},NList.IExpandableSublist{``1,``2})">
            <summary>
            Adds the items in a list in reverse to a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list whose items are to be added in reverse.</param>
            <param name="destination">The list to add the items to.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
        </member>
        <member name="M:NList.List.AddRotatedLeft``3(NList.IReadOnlySublist{``0,``2},NList.IExpandableSublist{``1,``2},System.Int32)">
            <summary>
            Adds the items from a list to a destination, rotated to the left by the given shift amount.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list to copy.</param>
            <param name="destination">The list to copy to.</param>
            <param name="shift">The amount to rotate the items to the left.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <remarks>
            If the shift is negative, the algoritm simulates rotating the items to the right. If the shift is larger than the number of items, 
            the algorithm will simulate a complete rotation as many times as necessary.
            </remarks>
        </member>
        <member name="M:NList.List.AddSymmetricDifference``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3})">
            <summary>
            Adds the items that do not appear in both lists to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the third list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to add the items to.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <remarks>
            The items in the lists must be sorted according to the default ordering of the items. Neither of
            the lists can contain duplicate items.
            </remarks>
        </member>
        <member name="M:NList.List.AddSymmetricDifference``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3},System.Collections.Generic.IComparer{``3})">
            <summary>
            Adds the items that do not appear in both lists to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to add the items to.</param>
            <param name="comparer">The comparer to use to compare items from the first and second lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparer and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.AddSymmetricDifference``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3},System.Func{``3,``3,System.Int32})">
            <summary>
            Adds the items that do not appear in both lists to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to add the items to.</param>
            <param name="comparison">The delegate used to compare items from the first and second lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparison delegate and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.AddUnion``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3})">
            <summary>
            Adds the items that are unique across both lists to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the third list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to add the items to.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <remarks>
            The items in the lists must be sorted according to the default ordering of the items. Neither of
            the lists can contain duplicate items.
            </remarks>
        </member>
        <member name="M:NList.List.AddUnion``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3},System.Collections.Generic.IComparer{``3})">
            <summary>
            Adds the items that are unique across both lists to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to add the items to.</param>
            <param name="comparer">The comparer to use to compare items from the first and second lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparer and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.AddUnion``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IExpandableSublist{``2,``3},System.Func{``3,``3,System.Int32})">
            <summary>
            Adds the items that are unique across both lists to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to add the items to.</param>
            <param name="comparison">The delegate used to compare items from the first and second lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparison delegate and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.AddUnique``3(NList.IReadOnlySublist{``0,``2},NList.IExpandableSublist{``1,``2})">
            <summary>
            Adds the unique items from a list to a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list of items to add.</param>
            <param name="destination">The list to add the items to.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <remarks>The items in the list must be sorted according to the default ordering of the items.</remarks>
        </member>
        <member name="M:NList.List.AddUnique``3(NList.IReadOnlySublist{``0,``2},NList.IExpandableSublist{``1,``2},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Adds the unique items from a list to a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list of items to add.</param>
            <param name="destination">The list to add the items to.</param>
            <param name="comparer">The comparer to use to compare items.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <remarks>The list must be sorted.</remarks>
        </member>
        <member name="M:NList.List.AddUnique``3(NList.IReadOnlySublist{``0,``2},NList.IExpandableSublist{``1,``2},System.Func{``2,``2,System.Boolean})">
            <summary>
            Adds the unique items from a list to a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list of items to add.</param>
            <param name="destination">The list to add the items to.</param>
            <param name="comparison">The comparison delegate to use to compare items.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <remarks>The list must be sorted.</remarks>
        </member>
        <member name="M:NList.List.AreDisjoint``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2})">
            <summary>
            Determines if two lists share no items.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of items in both lists.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>True if no items are shared between the lists.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <remarks>
            This algorithm assumes that both lists are sorted according to the default order of the items.
            Both lists must contain distinct values.
            </remarks>
        </member>
        <member name="M:NList.List.AreDisjoint``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2},System.Collections.Generic.IComparer{``2})">
            <summary>
            Determines if two sorted lists share no equivilent items.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <param name="comparer">Compares an item from the first list to an item in the second list.</param>
            <returns>True if no items are equivilents between the lists.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            This algorithm assumes that the lists are sorted using a meaningful ordering that applies to both lists and that the
            comparer respects that order. Both lists must contain distinct values.
            </remarks>
        </member>
        <member name="M:NList.List.AreDisjoint``4(NList.IReadOnlySublist{``0,``1},NList.IReadOnlySublist{``2,``3},System.Func{``1,``3,System.Int32})">
            <summary>
            Determines if two sorted lists share no equivilent items.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="T1">The type of the items in the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T2">The type of the items in the second list.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <param name="comparison">Compares an item from the first list to an item in the second list.</param>
            <returns>True if no items are equivilents between the lists.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            This algorithm assumes that the lists are sorted using a meaningful ordering that applies to both lists and that the
            comparison delegate respects that order. Both lists must contain distinct values.
            </remarks>
        </member>
        <member name="M:NList.List.AreEqual``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2})">
            <summary>
            Determines whether two lists have all the same items in the same order.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>True if the lists contain the same items in the same order; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
        </member>
        <member name="M:NList.List.AreEqual``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Determines whether two lists have equivilent items in the same order.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <param name="comparer">The comparer to use to determine if two items are equivilent.</param>
            <returns>True if the lists have equivilent items in the same order; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.AreEqual``4(NList.IReadOnlySublist{``0,``1},NList.IReadOnlySublist{``2,``3},System.Func{``1,``3,System.Boolean})">
            <summary>
            Determines whether two lists have equivilent items in the same order.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="T1">The type of the items in the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T2">The type of the items in the second list.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <param name="comparison">The comparison delegate used to determine if two items are equivilent.</param>
            <returns>True if the lists have equivilent items in the same order; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.BinarySearch``2(NList.IReadOnlySublist{``0,``1},``1)">
            <summary>
            Finds the index of the value in a sorted list.
            </summary>
            <typeparam name="TList">The type of the list to search.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the value in the list if it is found -or- the bitwise compliment of its lower bound.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>
            This algorithm assumes that the list is sorted according to the default order of the items.
            </remarks>
        </member>
        <member name="M:NList.List.BinarySearch``2(NList.IReadOnlySublist{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Finds the index of the value in a sorted list.
            </summary>
            <typeparam name="TList">The type of the list to search.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for in the list.</param>
            <param name="comparer">The compare to use to compare the list items to the search value.</param>
            <returns>The index of the value in the list if it is found -or- the bitwise compliment of its lower bound.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            This algorithm assumes that the list is sorted using a meaningful ordering and that the
            comparer respects that order.
            </remarks>
        </member>
        <member name="M:NList.List.BinarySearch``3(NList.IReadOnlySublist{``0,``1},``2,System.Func{``1,``2,System.Int32})">
            <summary>
            Finds the index of the value in a sorted list.
            </summary>
            <typeparam name="TList">The type of the list to search.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <typeparam name="TSearch">The type of the value to search for.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for in the list.</param>
            <param name="comparison">The delegate used to compare the list items to the search value.</param>
            <returns>The index of the value in the list if it is found -or- the bitwise compliment of its lower bound.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            This algorithm assumes that the list is sorted using a meaningful ordering and that the
            comparison delegate respects that order.
            </remarks>
        </member>
        <member name="M:NList.List.BubbleSort``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Sorts a list using the bubble sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list to sort.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.BubbleSort``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts a list using the bubble sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list to sort.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparer">The comparer to use to compare items.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.BubbleSort``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Sorts a list using the bubble sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list to sort.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparison">The comparison delegate to use to compare items.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.Compare``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2})">
            <summary>
            Compares the items in two lists returning the first non-zero result, 
            a number less than zero if the first list is shorter,
            a number greater than zero if the second list is longer
            or zero if the lists are equal, in that order.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>
            An integer representing the results of comparing two list.
            If two items do not equal the result of comparing them is returned,
            otherwise, if the first list is shorter, a negative number is returned,
            otherwise, if the second list is longer, a positive number is returned,
            otherwise, if the lists are equal, zero is returned.
            </returns>
        </member>
        <member name="M:NList.List.Compare``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2},System.Collections.Generic.IComparer{``2})">
            <summary>
            Compares the items in two lists returning the first non-zero result, 
            a number less than zero if the first list is shorter,
            a number greater than zero if the second list is longer
            or zero if the lists are equal, in that order.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <param name="comparer">The comparer to use to compare items in the lists.</param>
            <returns>
            An integer representing the results of comparing two list.
            If two items do not equal the result of comparing them is returned,
            otherwise, if the first list is shorter, a negative number is returned,
            otherwise, if the second list is longer, a positive number is returned,
            otherwise, if the lists are equal, zero is returned.
            </returns>
        </member>
        <member name="M:NList.List.Compare``4(NList.IReadOnlySublist{``0,``1},NList.IReadOnlySublist{``2,``3},System.Func{``1,``3,System.Int32})">
            <summary>
            Compares the items in two lists returning the first non-zero result, 
            a number less than zero if the first list is shorter,
            a number greater than zero if the second list is longer
            or zero if the lists are equal, in that order.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="T1">The type of the items in the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T2">The type of the items in the second list.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <param name="comparison">The comparison delegate to use to compare items in the lists.</param>
            <returns>
            An integer representing the results of comparing two list.
            If two items do not equal the result of comparing them is returned,
            otherwise, if the first list is shorter, a negative number is returned,
            otherwise, if the second list is longer, a positive number is returned,
            otherwise, if the lists are equal, zero is returned.
            </returns>
        </member>
        <member name="M:NList.List.Contains``2(NList.IReadOnlySublist{``0,``1},``1)">
            <summary>
            Determines whether a list contains a value.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for.</param>
            <returns>True if the value is found in the list; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.Contains``2(NList.IReadOnlySublist{``0,``1},``1,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Determines whether a list contains a value.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for.</param>
            <param name="comparer">The comparer to use to determine if an item in the list matches the search value.</param>
            <returns>True if the value is found in the list; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.Contains``3(NList.IReadOnlySublist{``0,``1},``2,System.Func{``1,``2,System.Boolean})">
            <summary>
            Determines whether a list contains a value.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <typeparam name="TSearch">The type of the value being search for.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for.</param>
            <param name="comparison">The comparison delegate to use to determine if an item in the list matches the search value.</param>
            <returns>True if the value is found in the list; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.Contains``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Determines whether an item in a list satisfies a predicate.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="predicate">The condition an item must satisfy.</param>
            <returns>True if any items satisfy the predicate; otherwise, false.</returns>
        </member>
        <member name="M:NList.List.ContainsAny``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2})">
            <summary>
            Determines whether any of the items in the second list are in the first list.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>True if any items in the second list are in the first list; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
        </member>
        <member name="M:NList.List.ContainsAny``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Determines whether any of the items in the second list are in the first list.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <param name="comparer">The comparer to use to determine if an item in the first list matches an item in the second.</param>
            <returns>True if any items in the second list are in the first list; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.ContainsAny``4(NList.IReadOnlySublist{``0,``1},NList.IReadOnlySublist{``2,``3},System.Func{``1,``3,System.Boolean})">
            <summary>
            Determines whether any of the items in the second list are in the first list.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="T1">The type of the items in the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T2">The type of the items in the second list.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <param name="comparison">The comparison delegate to use to determine if an item in the first list matches an item in the second.</param>
            <returns>True if any items in the second list are in the first list; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.ContainsDuplicates``2(NList.IReadOnlySublist{``0,``1})">
            <summary>
            Determines whether any equivalent items reoccur next to each other in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <returns>True if there are duplicates; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>The items are expected tp be sorted according to the default order of the items.</remarks>
        </member>
        <member name="M:NList.List.ContainsDuplicates``2(NList.IReadOnlySublist{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Determines whether any equivalent items reoccur next to each other in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparer">The comparer to use to determine whether two items are equivalent.</param>
            <returns>True if there are duplicates; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>The list is expected to be sorted such that equivalent item are adjacent.</remarks>
        </member>
        <member name="M:NList.List.ContainsDuplicates``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,``1,System.Boolean})">
            <summary>
            Determines whether any equivalent items reoccur next to each other in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparison">The comparison delegate to use to determine whether two items are equivalent.</param>
            <returns>True if there are duplicates; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>The list is expected to be sorted such that equivalent item are adjacent.</remarks>
        </member>
        <member name="M:NList.List.ContainsSequence``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2})">
            <summary>
            Determines whether the items in the second list appear in the same order inside the first list.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list">The list of items to search within.</param>
            <param name="sequence">The list of items to search for.</param>
            <returns>True if the items in the second list appear in the same order in the first list.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
        </member>
        <member name="M:NList.List.ContainsSequence``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Determines whether the items in the second list appear in the same order inside the first list.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list">The list of items to search within.</param>
            <param name="sequence">The list of items to search for.</param>
            <param name="comparer">The comparer to use to compare items in the lists.</param>
            <returns>True if the items in the second list appear in the same order in the first list.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.ContainsSequence``4(NList.IReadOnlySublist{``0,``1},NList.IReadOnlySublist{``2,``3},System.Func{``1,``3,System.Boolean})">
            <summary>
            Determines whether the items in the second list appear in the same order inside the first list.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="T1">The type of the items in the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T2">The type of the items in the second list.</typeparam>
            <param name="list">The list of items to search within.</param>
            <param name="sequence">The list of items to search for.</param>
            <param name="comparison">The comparison delegate to use to compare items in the lists.</param>
            <returns>True if the items in the second list appear in the same order in the first list.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.Copy``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2})">
            <summary>
            Copies items from a list to a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list to copy.</param>
            <param name="destination">The list to copy the items into.</param>
            <returns>The index into the destination list past the last item copied.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
        </member>
        <member name="M:NList.List.Copy``2(System.Collections.Generic.IEnumerable{``1},NList.IMutableSublist{``0,``1})">
            <summary>
            Copies the items in the source collection to the destination list.
            </summary>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the collections.</typeparam>
            <param name="source">The items to copy to the destination.</param>
            <param name="destination">The list to copy the items.</param>
            <returns>The index into the destination past the last item that was copied.</returns>
            <exception cref="T:System.ArgumentNullException">The source collection is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
        </member>
        <member name="M:NList.List.CopyCombined``6(NList.IReadOnlySublist{``0,``1},NList.IReadOnlySublist{``2,``3},NList.IMutableSublist{``4,``5},System.Func{``1,``3,``5})">
            <summary>
            Combines the values from two lists and stores the results in a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="T1">The type of the items in the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="T2">The type of the items in the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="TDest">The type of the items in the destination list.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The destination list.</param>
            <param name="combiner">The delegate to use to combine items from the first and second list.</param>
            <returns>The index into the destination list after the last combined item.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The combiner is null.</exception>
        </member>
        <member name="M:NList.List.CopyConverted``4(NList.IReadOnlySublist{``0,``1},NList.IMutableSublist{``2,``3})">
            <summary>
            Converts items from a list and stores the results in a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="TDestination">The type of the items in the destination list.</typeparam>
            <param name="source">The list of items to convert.</param>
            <param name="destination">The list to store the results of the conversion.</param>
            <returns>The index into the destination past the last set item.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.InvalidCastException">
            This conversion is not supported 
            -or- a value is null and TDestination is a value type 
            -or- a value does not implement the System.IConvertible interface.
            </exception>
            <exception cref="T:System.FormatException">A value is not in a format recognized by the format provider.</exception>
            <exception cref="T:System.OverflowException">A value represents a number that is out of the range of TDest.</exception>
            <remarks>
            Conversion will take place using the <see cref="M:NList.Utilities.Convert``2(``0)"/> method.
            </remarks>
        </member>
        <member name="M:NList.List.CopyConverted``4(NList.IReadOnlySublist{``0,``1},NList.IMutableSublist{``2,``3},System.Func{``1,``3})">
            <summary>
            Converts items from a list and stores the results in a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="TDestination">The type of the items in the destination list.</typeparam>
            <param name="source">The list of items to convert.</param>
            <param name="destination">The list to store the results of the conversion.</param>
            <param name="converter">The conversion delegate to convert instances of T to TDest.</param>
            <returns>The index into the destination past the last set item.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
        </member>
        <member name="M:NList.List.CopyDifference``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3})">
            <summary>
            Copies the items in the first list that are not in the second list to the destination.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to copy the items to.</param>
            <returns>The index into the destination past the last item copies.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <remarks>
            The first and second lists must be sorted the same and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.CopyDifference``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3},System.Collections.Generic.IComparer{``3})">
            <summary>
            Copies the items in the first list that are not in the second list to the destination.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to copy the items to.</param>
            <param name="comparer">The comparer to use to compare items from the first and second lists.</param>
            <returns>The index into the destination past the last item copies.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparer and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.CopyDifference``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3},System.Func{``3,``3,System.Int32})">
            <summary>
            Copies the items in the first list that are not in the second list to the destination.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to copy the items to.</param>
            <param name="comparison">The delegate used to compare items from the first and second lists.</param>
            <returns>The index into the destination past the last item copies.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparison delegate and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.CopyIf``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2},System.Func{``2,System.Boolean})">
            <summary>
            Copies the items from a list satisfying the predicate to a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list of items to copy.</param>
            <param name="destination">The list to copy the items to.</param>
            <param name="predicate">The delegate used to determine whether to copy an item.</param>
            <returns>The index into the destination past the last item copied.</returns>
        </member>
        <member name="M:NList.List.CopyIntersection``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3})">
            <summary>
            Copies the items that appear in both lists to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to copy the intersecting items to.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <remarks>
            The items in the lists must be sorted according to the default ordering of the items. Neither of
            the lists can contain duplicate items.
            </remarks>
        </member>
        <member name="M:NList.List.CopyIntersection``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3},System.Collections.Generic.IComparer{``3})">
            <summary>
            Copies the items that appear in both lists to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to copy the intersecting items to.</param>
            <param name="comparer">The comparer to use to compare items from the first and second lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparer and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.CopyIntersection``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3},System.Func{``3,``3,System.Int32})">
            <summary>
            Copies the items that appear in both lists to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to copy the intersecting items to.</param>
            <param name="comparison">The delegate used to compare items from the first and second lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparison delegate and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.CopyMerged``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3})">
            <summary>
            Merges the items from two lists such that they remain in sorted order, copying the items
            to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list to merge.</param>
            <param name="source2">The second list to merge.</param>
            <param name="destination">The list to copy the merged items to.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <remarks>
            The items in the lists must be sorted according to the default ordering of the items.
            </remarks>
        </member>
        <member name="M:NList.List.CopyMerged``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3},System.Collections.Generic.IComparer{``3})">
            <summary>
            Merges the items from two lists such that they remain in sorted order, copying the items
            to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list to merge.</param>
            <param name="source2">The second list to merge.</param>
            <param name="destination">The list to copy the merged items to.</param>
            <param name="comparer">The comparer to use to compare items from the lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparer.
            </remarks>
        </member>
        <member name="M:NList.List.CopyMerged``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3},System.Func{``3,``3,System.Int32})">
            <summary>
            Merges the items from two lists such that they remain in sorted order, copying the items
            to a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list to merge.</param>
            <param name="source2">The second list to merge.</param>
            <param name="destination">The list to copy the merged items to.</param>
            <param name="comparison">The delegate to use to compare items from the lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparison delegate.
            </remarks>
        </member>
        <member name="M:NList.List.CopyPartiallySorted``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2})">
            <summary>
            Copies the items of a list to a destination list as if they were sorted prior to being copied.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list to copy.</param>
            <param name="destination">The list to copy to.</param>
            <returns>The index into the destination past the last item copied.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <remarks>
            If the destination is large enough to hold all of the items in the list, this method is equivilent to calling Copy,
            followed by a HeapSort.
            </remarks>
        </member>
        <member name="M:NList.List.CopyPartiallySorted``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2},System.Collections.Generic.IComparer{``2})">
            <summary>
            Copies the items of a list to a destination list as if they were sorted prior to being copied.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list to copy.</param>
            <param name="destination">The list to copy to.</param>
            <param name="comparer">The comparer to use to compare two items.</param>
            <returns>The index into the destination past the last item copied.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            If the destination is large enough to hold all of the items in the list, this method is equivilent to calling Copy,
            followed by a HeapSort.
            </remarks>
        </member>
        <member name="M:NList.List.CopyPartiallySorted``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2},System.Func{``2,``2,System.Int32})">
            <summary>
            Copies the items of a list to a destination list as if they were sorted prior to being copied.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list to copy.</param>
            <param name="destination">The list to copy to.</param>
            <param name="comparison">The comparison delegate to use to compare two items.</param>
            <returns>The index into the destination past the last item copied.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            If the destination is large enough to hold all of the items in the list, this method is equivilent to calling Copy,
            followed by a HeapSort.
            </remarks>
        </member>
        <member name="M:NList.List.CopyPartitioned``4(NList.IReadOnlySublist{``0,``3},NList.IMutableSublist{``1,``3},NList.IMutableSublist{``2,``3},System.Func{``3,System.Boolean})">
            <summary>
            Copies the items from a list satisfying the predicate into the first destination list and the remaining
            into the second destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList1">The type of the first destination list.</typeparam>
            <typeparam name="TDestinationList2">The type of the second destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list to partition.</param>
            <param name="destination1">The list to copy the items that satisfy the predicate.</param>
            <param name="destination2">The list to copy the items that don't satisfy the predicate.</param>
            <param name="predicate">The condition an item must satisfy to be copied to the first destination list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The first destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:NList.List.CopyRandomSamples``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2},System.Random)">
            <summary>
            Randomly copies items from a list to fill a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="source">The list of items to randomly choose values from.</param>
            <param name="destination">The list to copy items to.</param>
            <param name="random">The random number generator to use.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The random number generator is null.</exception>
            <remarks>The order that the items appear in the destination is not guaranteed.</remarks>
        </member>
        <member name="M:NList.List.CopyRandomSamples``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2},System.Func{System.Int32})">
            <summary>
            Randomly copies items from a list to fill a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="source">The list of items to randomly choose values from.</param>
            <param name="destination">The list to copy items to.</param>
            <param name="generator">The random number generator to use.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The random number generator is null.</exception>
            <remarks>The order that the items appear in the destination is not guaranteed.</remarks>
        </member>
        <member name="M:NList.List.CopyReplaced``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2},System.Func{``2,System.Boolean},``2)">
            <summary>
            Copies a list, replacing items satisfying the predicate with the given replacement.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list to copy.</param>
            <param name="destination">The list to copy to.</param>
            <param name="predicate">The predicate used to determine whether an item should be replaced.</param>
            <param name="replacement">The value to use to replace items satisfying the predicate.</param>
            <returns>The index into the destination past the last copied item.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:NList.List.CopyReplaced``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2},System.Func{``2,System.Boolean},System.Func{``2,``2})">
            <summary>
            Copies a list, replacing items satisfying the predicate with the result of the generator delegate.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list to copy.</param>
            <param name="destination">The list to copy to.</param>
            <param name="predicate">The predicate used to determine whether an item should be replaced.</param>
            <param name="generator">The delegate to use to generate the replacement value.</param>
            <returns>The index into the destination past the last copied item.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The generator delegate is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:NList.List.CopyReversed``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2})">
            <summary>
            Copies the items in a list in reverse to a destination list.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="source">The list to copy from.</param>
            <param name="destination">The list to copy to.</param>
            <returns>The index into the destination past the last item copied.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <remarks>
            If the destination is too small to hold all of the values in the source, then only the items at the beginning
            of the source are copied.
            </remarks>
        </member>
        <member name="M:NList.List.CopyRotatedLeft``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2},System.Int32)">
            <summary>
            Copies the items from a list to a destination, rotated to the left by the given shift amount.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list to copy.</param>
            <param name="destination">The list to copy to.</param>
            <param name="shift">The amount to rotate the items to the left.</param>
            <returns>The index into the destination past the last copied item.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <remarks>
            If the shift is negative, the algoritm simulates rotating the items to the right. If the shift is larger than the number of items, 
            the algorithm will simulate a complete rotation as many times as necessary.
            </remarks>
        </member>
        <member name="M:NList.List.CopySymmetricDifference``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3})">
            <summary>
            Copies the items that do not appear in both lists into a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the third list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to copy the items to.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <remarks>
            The items in the lists must be sorted according to the default ordering of the items. Neither of
            the lists can contain duplicate items.
            </remarks>
        </member>
        <member name="M:NList.List.CopySymmetricDifference``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3},System.Collections.Generic.IComparer{``3})">
            <summary>
            Copies the items that do not appear in both lists into a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to copy the items to.</param>
            <param name="comparer">The comparer to use to compare items from the first and second lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparer and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.CopySymmetricDifference``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3},System.Func{``3,``3,System.Int32})">
            <summary>
            Copies the items that do not appear in both lists into a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to copy the items to.</param>
            <param name="comparison">The delegate used to compare items from the first and second lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparison delegate and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.CopyUnion``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3})">
            <summary>
            Copies the items that are unique across both lists into a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the third list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to copy the items to.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <remarks>
            The items in the lists must be sorted according to the default ordering of the items. Neither of
            the lists can contain duplicate items.
            </remarks>
        </member>
        <member name="M:NList.List.CopyUnion``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3},System.Collections.Generic.IComparer{``3})">
            <summary>
            Copies the items that are unique across both lists into a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to copy the items to.</param>
            <param name="comparer">The comparer to use to compare items from the first and second lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparer and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.CopyUnion``4(NList.IReadOnlySublist{``0,``3},NList.IReadOnlySublist{``1,``3},NList.IMutableSublist{``2,``3},System.Func{``3,``3,System.Int32})">
            <summary>
            Copies the items that are unique across both lists into a destination list.
            </summary>
            <typeparam name="TSourceList1">The type of the first list.</typeparam>
            <typeparam name="TSourceList2">The type of the second list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source1">The first list.</param>
            <param name="source2">The second list.</param>
            <param name="destination">The list to copy the items to.</param>
            <param name="comparison">The delegate used to compare items from the first and second lists.</param>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            The first and second lists must be sorted according to the comparison delegate and must not contain duplicates.
            </remarks>
        </member>
        <member name="M:NList.List.CopyUnique``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2})">
            <summary>
            Copies the items from a list that are unique to a destination.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list to copy from.</param>
            <param name="destination">The list to copy to.</param>
            <returns>The index into the destination past the last copied item.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <remarks>The list must be sorted such that equivilent items appear adjacent.</remarks>
        </member>
        <member name="M:NList.List.CopyUnique``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Copies the items from a list that are unique to a destination.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list to copy from.</param>
            <param name="destination">The list to copy to.</param>
            <param name="comparer">The compare to use to determine whether two items are equivilent.</param>
            <returns>The index into the destination past the last copied item.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>The list must be sorted such that equivilent items appear adjacent.</remarks>
        </member>
        <member name="M:NList.List.CopyUnique``3(NList.IReadOnlySublist{``0,``2},NList.IMutableSublist{``1,``2},System.Func{``2,``2,System.Boolean})">
            <summary>
            Copies the items from a list that are unique to a destination.
            </summary>
            <typeparam name="TSourceList">The type of the list.</typeparam>
            <typeparam name="TDestinationList">The type of the destination.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="source">The list to copy from.</param>
            <param name="destination">The list to copy to.</param>
            <param name="comparison">The delegate used to determine whether two items are equivilent.</param>
            <returns>The index into the destination past the last copied item.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The destination is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>The list must be sorted such that equivilent items appear adjacent.</remarks>
        </member>
        <member name="M:NList.List.CountIf``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Counts the items in a list that satisfy the predicate.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to count items in.</param>
            <param name="predicate">The condition that an item must satisfy to be counted.</param>
            <returns>The number of items that satisfy the predicate.</returns>
        </member>
        <member name="M:NList.List.Fill``2(NList.IMutableSublist{``0,``1},``1)">
            <summary>
            Sets each item in a list to the given value.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to fill.</param>
            <param name="value">The value to fill the list with.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>If T is a reference type, each item in the list will refer to the same instance.</remarks>
        </member>
        <member name="M:NList.List.Fill``2(NList.IMutableSublist{``0,``1},System.Func{``1})">
            <summary>
            Sets each item in a list to the given value.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to fill.</param>
            <param name="generator">The delegate to use to fill the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The generator delegate is null.</exception>
            <remarks>The generator will be called to set each item in the list.</remarks>
        </member>
        <member name="M:NList.List.Fill``2(NList.IMutableSublist{``0,``1},System.Func{System.Int32,``1})">
            <summary>
            Sets each item in a list to the given value.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to fill.</param>
            <param name="generator">The delegate to use to fill the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The generator delegate is null.</exception>
            <remarks>
            The generator will be called to set each item in the list. 
            The relative index of the item is passed with each call to the generator.
            </remarks>
        </member>
        <member name="M:NList.List.ForEach``2(NList.IReadOnlySublist{``0,``1},System.Action{``1})">
            <summary>
            Performs the given action on each item in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list of items to perform the action on.</param>
            <param name="action">The action to perform on each item.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The action delegate is null.</exception>
        </member>
        <member name="M:NList.List.Grow``2(``0,System.Int32,``1)">
            <summary>
            Adds the given value to a list until it is the given size.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to add items to.</param>
            <param name="size">The size to make the list.</param>
            <param name="value">The value to add to the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size is negative.</exception>
            <remarks>If the list is smaller than the size, the list remains the same size.</remarks>
        </member>
        <member name="M:NList.List.Grow``2(``0,System.Int32,System.Func{``1})">
            <summary>
            Adds the generated value to a list until it is the given size.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to add items to.</param>
            <param name="size">The size to make the list.</param>
            <param name="generator">The generator to use to generate the values to add to the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size is negative.</exception>
            <exception cref="T:System.ArgumentNullException">The generator is null.</exception>
            <remarks>If the list is smaller than the size, the list remains the same size.</remarks>
        </member>
        <member name="M:NList.List.Grow``2(``0,System.Int32,System.Func{System.Int32,``1})">
            <summary>
            Adds the generated value to a list until it is the given size.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to add items to.</param>
            <param name="size">The size to make the list.</param>
            <param name="generator">The generator to use to generate the values to add to the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size is negative.</exception>
            <exception cref="T:System.ArgumentNullException">The generator is null.</exception>
            <remarks>
            If the list is smaller than the size, the list remains the same size.
            The integer passed to the generator is the index where the generated value will be added.
            </remarks>
        </member>
        <member name="M:NList.List.HeapAdd``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Moves an item after the end of a heap to its appropriate location.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The heap to add the value to.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>The list must be a max heap.</remarks>
        </member>
        <member name="M:NList.List.HeapAdd``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Moves an item after the end of a heap to its appropriate location.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The heap to add the value to.</param>
            <param name="comparer">The comparer to use to compare items in the heap.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>The list must be a heap according to the comparer.</remarks>
        </member>
        <member name="M:NList.List.HeapAdd``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Moves an item after the end of a heap to its appropriate location.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The heap to add the value to.</param>
            <param name="comparison">The comparison delegate to use to compare items in the heap.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>The list must be a heap according to the comparison delegate.</remarks>
        </member>
        <member name="M:NList.List.HeapRemove``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Moves the item at the top of the heap to the end of the list, maintaining the heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The heap to remove the top item from.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>The list must be a max heap.</remarks>
        </member>
        <member name="M:NList.List.HeapRemove``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Moves the item at the top of the heap to the end of the list, maintaining the heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The heap to remove the top item from.</param>
            <param name="comparer">The comparer to use to compare items in the heap.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The compare is null.</exception>
            <remarks>The list must be a heap according to the comparer.</remarks>
        </member>
        <member name="M:NList.List.HeapRemove``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Moves the item at the top of the heap to the end of the list, maintaining the heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The heap to remove the top item from.</param>
            <param name="comparison">The comparison delegate to use to compare items in the heap.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>The list must be a heap according to the comparison delegate.</remarks>
        </member>
        <member name="M:NList.List.HeapSort``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Sorts a list representing a heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The heap to sort.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>The list must be a max heap.</remarks>
        </member>
        <member name="M:NList.List.HeapSort``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts a list representing a heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The heap to sort.</param>
            <param name="comparer">The comparer to use to compare items in the heap.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>The list must be a heap according to the comparer.</remarks>
        </member>
        <member name="M:NList.List.HeapSort``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Sorts a list representing a heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The heap to sort.</param>
            <param name="comparison">The comparison delegate to use to compare items in the heap.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>The list must be a heap according to the comparison delegate.</remarks>
        </member>
        <member name="M:NList.List.IndexOf``2(NList.IReadOnlySublist{``0,``1},``1)">
            <summary>
            Gets the index of the given value within a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for.</param>
            <returns>The index of the value in the list -or- an index past the last item in the list, if the value is not found.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.IndexOf``2(NList.IReadOnlySublist{``0,``1},``1,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Gets the index of the given value within a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for.</param>
            <param name="comparer">The comparer to use to compare items in the list to the search value.</param>
            <returns>The index of the value in the list -or- an index past the last item in the list, if the value is not found.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.IndexOf``3(NList.IReadOnlySublist{``0,``1},``2,System.Func{``1,``2,System.Boolean})">
            <summary>
            Gets the index of the given value within a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <typeparam name="TSearch">The type of the value being searched for.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for.</param>
            <param name="comparison">The comparison delegate used for comparing items in the list to the search value.</param>
            <returns>&gt;The index of the value in the list -or- an index past the last item in the list, if the value is not found.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.IndexOf``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Finds the index in a list of the first item satisfying the predicate.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="predicate">The condition that must be satisfied.</param>
            <returns>
            The index of the first item satisfying the predicate 
            -or- an index past the last item in the list, if the value is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:NList.List.IndexOfAny``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2})">
            <summary>
            Finds the first index in a list of a value that appears in another list.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The list to search.</param>
            <param name="list2">The list of values to search for.</param>
            <returns>
            The first index into the list of a value that appears in the other list 
            -or- an index past the last item in the list, if none of the values are found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
        </member>
        <member name="M:NList.List.IndexOfAny``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Finds the first index in a list of a value that appears in another list.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The list to search.</param>
            <param name="list2">The list of values to search for.</param>
            <param name="comparer">The comparer to use to comparer items between the lists.</param>
            <returns>
            The first index into the list of a value that appears in the other list 
            -or- an index past the last item in the list, if none of the values are found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.IndexOfAny``4(NList.IReadOnlySublist{``0,``1},NList.IReadOnlySublist{``2,``3},System.Func{``1,``3,System.Boolean})">
            <summary>
            Finds the first index in a list of a value that appears in another list.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="T1">The type of the items in the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T2">The type of the items in the second list.</typeparam>
            <param name="list1">The list to search.</param>
            <param name="list2">The list of values to search for.</param>
            <param name="comparison">The comparison delegate to use to compare items between the lists.</param>
            <returns>
            The first index into the list of a value that appears in the other list 
            -or- an index past the last item in the list, if none of the values are found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.IndexOfDuplicates``2(NList.IReadOnlySublist{``0,``1})">
            <summary>
            Finds the index of the first occurrence of equivilent, adjacent items in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <returns>
            The index at the beginning of the equivilent items -or- an index past the end of the list, if no duplicates are found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>The list must be sorted according to the default order of the items.</remarks>
        </member>
        <member name="M:NList.List.IndexOfDuplicates``2(NList.IReadOnlySublist{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Finds the index of the first occurrence of equivilent, adjacent items in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparer">The comparer to use to determine if two items are equivalent.</param>
            <returns>
            The index at the beginning of the equivilent items -or- an index past the end of the list, if no duplicates are found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>The list must be sorted such that equivalent items are adjacent.</remarks>
        </member>
        <member name="M:NList.List.IndexOfDuplicates``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,``1,System.Boolean})">
            <summary>
            Finds the index of the first occurrence of equivilent, adjacent items in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparison">The comparison delegate to use to determine if two items are equivalent.</param>
            <returns>
            The index at the beginning of the equivilent items -or- an index past the end of the list, if no duplicates are found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>The list must be sorted such that equivalent items are adjacent.</remarks>
        </member>
        <member name="M:NList.List.IndexOfSequence``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2})">
            <summary>
            Finds the index in a list of the first occurrence of the given sequence.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list">The list to search.</param>
            <param name="sequence">The sequence to search for.</param>
            <returns>
            The index in a list of the first occurrence of the given sequence 
            -or- the index past the last item in the list, if the sequence wasn't found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The sequence is null.</exception>
        </member>
        <member name="M:NList.List.IndexOfSequence``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Finds the index in a list of the first occurrence of the given sequence.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list">The list to search.</param>
            <param name="sequence">The sequence to search for.</param>
            <param name="comparer">The comparer to use to compare items in the list to those in the sequence.</param>
            <returns>
            The index in a list of the first occurrence of the given sequence
            -or- the index past the last item in the list, if the sequence wasn't found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The sequence is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.IndexOfSequence``4(NList.IReadOnlySublist{``0,``1},NList.IReadOnlySublist{``2,``3},System.Func{``1,``3,System.Boolean})">
            <summary>
            Finds the index in a list of the first occurrence of the given sequence.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="T1">The type of the items in the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T2">The type of the items in the second list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="sequence">The sequence to search for.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list to those in the sequence.</param>
            <returns>
            The index in a list of the first occurrence of the given sequence
            -or- the index past the last item in the list, if the sequence wasn't found.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The sequence is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.InsertionSort``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Sorts the list using the insertion sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.InsertionSort``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the list using the insertion sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.InsertionSort``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Sorts the list using the insertion sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.IsHeap``2(NList.IReadOnlySublist{``0,``1})">
            <summary>
            Determines whether the given list is a valid heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to check.</param>
            <returns>True if the list represents a valid heap; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.IsHeap``2(NList.IReadOnlySublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Determines whether the given list is a valid heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to check.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>True if the list represents a valid heap; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.IsHeap``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Determines whether the given list is a valid heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to check.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <returns>True if the list represents a valid heap; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.IsHeapUntil``2(NList.IReadOnlySublist{``0,``1})">
            <summary>
            Finds the index in which the list stops being a valid heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <returns>
            The index in which the list stops being a valid heap -or- an index past the last item in the list, if the entire list is a valid heap.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.IsHeapUntil``2(NList.IReadOnlySublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Finds the index in which the list stops being a valid heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>
            The index in which the list stops being a valid heap -or- an index past the last item in the list, if the entire list is a valid heap.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.IsHeapUntil``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Finds the index in which the list stops being a valid heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <returns>
            The index in which the list stops being a valid heap -or- an index past the last item in the list, if the entire list is a valid heap.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.IsPartitioned``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Determines whether a list is partitioned.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to check.</param>
            <param name="predicate">The predicate to check if the list is partitioned.</param>
            <returns>True if the list is partitioned by the given predicate; otherwise, false.</returns>
            <remarks>The algorithm expects that the list is partitioned such that the items satisfying the predicate appear first.</remarks>
        </member>
        <member name="M:NList.List.IsPartitionedUntil``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Finds the index in which the list stops being partitioned.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="predicate">The condition that the list is partitioned by.</param>
            <returns>
            The index in which the list stops being partitioned -or- an index past the last item in the list, if the entire list is partitioned.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:NList.List.IsSet``2(NList.IReadOnlySublist{``0,``1})">
            <summary>
            Determines whether the list is a valid ordered set.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to check.</param>
            <returns>True if the list is a valid ordered set; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.IsSet``2(NList.IReadOnlySublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Determines whether the list is a valid ordered set.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to check.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>True if the list is a valid ordered set; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.IsSet``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Determines whether the list is a valid ordered set.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to check.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <returns>True if the list is a valid ordered set; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.IsSetUntil``2(NList.IReadOnlySublist{``0,``1})">
            <summary>
            Finds the index in which the list stops being a valid set.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <returns>
            The index in which the list stops being a valid set -or- an index past the last item in the list, if the entire list is a set.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.IsSetUntil``2(NList.IReadOnlySublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Finds the index in which the list stops being a valid set.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>
            The index in which the list stops being a valid set -or- an index past the last item in the list, if the entire list is a set.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.IsSetUntil``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Finds the index in which the list stops being a valid set.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <returns>
            The index in which the list stops being a valid set -or- an index past the last item in the list, if the entire list is a set.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.IsSubset``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2})">
            <summary>
            Determines whether all of the items in the second list appear in the first list.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>True if all of the items in the second list appear in the first list; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <remarks>
            This algorithm assumes that both lists are sorted according to the default order of the items. 
            Both lists must contain distinct values.
            </remarks>
        </member>
        <member name="M:NList.List.IsSubset``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2},System.Collections.Generic.IComparer{``2})">
            <summary>
            Determines whether all of the items in the second list appear in the first list.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <param name="comparer">The comparison delegate to use to compare items from the lists.</param>
            <returns>True if all of the items in the second list have an equivilent item in the first list; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            This algorithm assumes that the lists are sorted using a meaningful ordering that applies to both lists and that the
            comparison delegate respects that order. Both lists must contain distinct values.
            </remarks>
        </member>
        <member name="M:NList.List.IsSubset``4(NList.IReadOnlySublist{``0,``1},NList.IReadOnlySublist{``2,``3},System.Func{``1,``3,System.Int32})">
            <summary>
            Determines whether all of the items in the second list appear in the first list.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="T1">The type of the items in the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T2">The type of the items in the second list.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <param name="comparison">The comparison delegate to use to compare items from the lists.</param>
            <returns>True if all of the items in the second list have an equivilent item in the first list; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            This algorithm assumes that the lists are sorted using a meaningful ordering that applies to both lists and that the
            comparison delegate respects that order. Both lists must contain distinct values.
            </remarks>
        </member>
        <member name="M:NList.List.IsSorted``2(NList.IReadOnlySublist{``0,``1})">
            <summary>
            Determines whether a list is sorted.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to check.</param>
            <returns>True if the list is sorted; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.IsSorted``2(NList.IReadOnlySublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Determines whether a list is sorted.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to check.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>True if the list is sorted; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.IsSorted``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Determines whether a list is sorted.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to check.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <returns>True if the list is sorted; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.IsSortedUntil``2(NList.IReadOnlySublist{``0,``1})">
            <summary>
            Finds the index in which the list stops being sorted.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <returns>The index in which the list stops being sorted -or- an index past the end of the list, if the list is sorted.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.IsSortedUntil``2(NList.IReadOnlySublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Finds the index in which the list stops being sorted.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>The index in which the list stops being sorted -or- an index past the end of the list, if the list is sorted.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.IsSortedUntil``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Finds the index in which the list stops being sorted.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparison">The comparison delegate to use to comparer items in the list.</param>
            <returns>The index in which the list stops being sorted -or- an index past the end of the list, if the list is sorted.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.ItemAt``2(NList.IMutableSublist{``0,``1},System.Int32)">
            <summary>
            Arranges the items in a list such that the item at the given index is the same had the list been sorted.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to rearrange.</param>
            <param name="index">The index into the list to move the expected item.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- outside the bounds of the list.</exception>
        </member>
        <member name="M:NList.List.ItemAt``2(NList.IMutableSublist{``0,``1},System.Int32,System.Collections.Generic.IComparer{``1})">
            <summary>
            Arranges the items in a list such that the item at the given index is the same had the list been sorted.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to rearrange.</param>
            <param name="index">The index into the list to move the expected item.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- outside the bounds of the list.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.ItemAt``2(NList.IMutableSublist{``0,``1},System.Int32,System.Func{``1,``1,System.Int32})">
            <summary>
            Arranges the items in a list such that the item at the given index is the same had the list been sorted.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to rearrange.</param>
            <param name="index">The index into the list to move the expected item.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- outside the bounds of the list.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.LowerAndUpperBound``2(NList.IReadOnlySublist{``0,``1},``1)">
            <summary>
            Gets the range of the items in a list that are equal to the given value.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for.</param>
            <returns>
            The indexes representing the lower and upper bounds.
            </returns>
            <remarks>
            This algorithm assumes that the list is sorted according to the default order of the items.
            </remarks>
        </member>
        <member name="M:NList.List.LowerAndUpperBound``2(NList.IReadOnlySublist{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Gets the range of the items in a list that are equivilent to the given value.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">Th value to search for.</param>
            <param name="comparer">The comparison delegate to use to compare items from the list and the search value.</param>
            <returns>
            The indexes representing the lower and upper bounds.
            </returns>
            <remarks>
            This algorithm assumes that the list is sorted using a meaningful ordering and that the
            comparison delegate respects that order.
            </remarks>
        </member>
        <member name="M:NList.List.LowerAndUpperBound``3(NList.IReadOnlySublist{``0,``1},``2,System.Func{``1,``2,System.Int32})">
            <summary>
            Gets the range of the items in a list that are equivilent to the given value.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <typeparam name="TSearch">The type of the value to search for.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">Th value to search for.</param>
            <param name="comparison">The comparison delegate to use to compare items from the list and the search value.</param>
            <returns>
            The indexes representing the lower and upper bounds.
            </returns>
            <remarks>
            This algorithm assumes that the list is sorted using a meaningful ordering and that the
            comparison delegate respects that order.
            </remarks>
        </member>
        <member name="M:NList.List.LowerBound``2(NList.IReadOnlySublist{``0,``1},``1)">
            <summary>
            Finds the first index in a sorted list where the given value would belong.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for.</param>
            <returns>The first index in a sorted list where the given value would belong.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>This algorithm assumes that the list is sorted according to the default order of the items.</remarks>
        </member>
        <member name="M:NList.List.LowerBound``2(NList.IReadOnlySublist{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Finds the first index in a sorted list where the given value would belong.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for.</param>
            <param name="comparer">The comparer to use to compare items in the list to the search value.</param>
            <returns>The first index in a sorted list where the given value would belong.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            This algorithm assumes that the list is sorted using a meaningful ordering and that the
            comparer respects that order.
            </remarks>
        </member>
        <member name="M:NList.List.LowerBound``3(NList.IReadOnlySublist{``0,``1},``2,System.Func{``1,``2,System.Int32})">
            <summary>
            Finds the first index in a sorted list where the given value would belong.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <typeparam name="TSearch">The type of the search value.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list to the search value.</param>
            <returns>The first index in a sorted list where the given value would belong.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            This algorithm assumes that the list is sorted using a meaningful ordering and that the
            comparison delegate respects that order.
            </remarks>
        </member>
        <member name="M:NList.List.MakeHeap``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Rearranges the items in a list such that they represent a max heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to rearrange into a heap.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.MakeHeap``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Rearranges the items in a list such that they represent a max heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to rearrange into a heap.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.MakeHeap``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Rearranges the items in a list such that they represent a max heap.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to rearrange into a heap.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.MakeSet``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Makes a list an ordered set.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to make a set.</param>
            <returns>The index past the last item in the set.</returns>
            <remarks>
            This set will be ordered according to the default ordering of the item type. 
            Items are not removed from the list. 
            Only items with an index less than the return value are part of the set.
            The remaining items are garbage.
            </remarks>
        </member>
        <member name="M:NList.List.MakeSet``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Makes a list an ordered set.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to make a set.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>The index past the last item in the set.</returns>
            <remarks>
            This set will be ordered according to the comparer. 
            Items are not removed from the list.
            Only items with an index less than the return value are part of the set.
            The remaining items are garbage.
            </remarks>
        </member>
        <member name="M:NList.List.MakeSet``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Makes a list an ordered set.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to make a set.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <returns>The index past the last item in the set.</returns>
            <remarks>
            This set will be ordered according to the comparer. 
            Items are not removed from the list.
            Only items with an index less than the return value are part of the set.
            The remaining items are garbage.
            </remarks>
        </member>
        <member name="M:NList.List.Maximum``2(NList.IReadOnlySublist{``0,``1})">
            <summary>
            Finds the index of the largest item in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <returns>The index of the largest item in the list -or- the index past the end of the list if it is empty.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.Maximum``2(NList.IReadOnlySublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Finds the index of the largest item in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>The index of the largest item in the list -or- the index past the end of the list if it is empty.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.Maximum``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Finds the index of the largest item in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list"></param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <returns>The index of the largest item in the list -or- the index past the end of the list if it is empty.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.MergeSort``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Sorts a list using the merge sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>
            MergeSort uses an underlying buffer that is roughly half the size of the given list.
            MergeSort will preserve the order that equivalent items appear in the list.
            </remarks>
        </member>
        <member name="M:NList.List.MergeSort``3(NList.IMutableSublist{``0,``2},NList.IMutableSublist{``1,``2})">
            <summary>
            Sorts a list using the merge sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="buffer">The list to use to act as a temporary buffer.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The buffer is null.</exception>
            <remarks>
            MergeSort uses the given buffer to merge. 
            It never needs to be larger than half the size of the list.
            Making it too small will impact performance negatively.
            MergeSort will preserve the order that equivalent items appear in the list.
            </remarks>
        </member>
        <member name="M:NList.List.MergeSort``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts a list using the merge sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            MergeSort uses an underlying buffer that is roughly half the size of the given list.
            MergeSort will preserve the order that equivalent items appear in the list.
            </remarks>
        </member>
        <member name="M:NList.List.MergeSort``3(NList.IMutableSublist{``0,``2},NList.IMutableSublist{``1,``2},System.Collections.Generic.IComparer{``2})">
            <summary>
            Sorts a list using the merge sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="buffer">The list to use to act as a temporary buffer.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The buffer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            MergeSort uses the given buffer to merge. 
            It never needs to be larger than half the size of the list.
            Making it too small will impact performance negatively.
            MergeSort will preserve the order that equivalent items appear in the list.
            </remarks>
        </member>
        <member name="M:NList.List.MergeSort``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Sorts a list using the merge sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            MergeSort uses an underlying buffer that is roughly half the size of the given list.
            MergeSort will preserve the order that equivalent items appear in the list.
            </remarks>
        </member>
        <member name="M:NList.List.MergeSort``3(NList.IMutableSublist{``0,``2},NList.IMutableSublist{``1,``2},System.Func{``2,``2,System.Int32})">
            <summary>
            Sorts a list using the merge sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="TBuffer">The type of the buffer.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="buffer">The list to use to act as a temporary buffer.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The buffer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            MergeSort uses the given buffer to merge. 
            It never needs to be larger than half the size of the list.
            Making it too small will impact performance negatively.
            MergeSort will preserve the order that equivalent items appear in the list.
            </remarks>
        </member>
        <member name="M:NList.List.Minimum``2(NList.IReadOnlySublist{``0,``1})">
            <summary>
            Finds the index of the smallest item in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <returns>The index of the smaller item in the list -or- the index past the end of the list, if it is empty.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.Minimum``2(NList.IReadOnlySublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Finds the index of the smallest item in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>The index of the smaller item in the list -or- the index past the end of the list, if it is empty.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.Minimum``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Finds the index of the smallest item in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <returns>The index of the smaller item in the list -or- the index past the end of the list, if it is empty.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.MinimumMaximum``2(NList.IReadOnlySublist{``0,``1})">
            <summary>
            Finds the indexes of the smallest and largest items in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <returns>
            The indexes of the smallest and largest items in the list, in that order -or- indexes past the end of the list if it is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.MinimumMaximum``2(NList.IReadOnlySublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Finds the indexes of the smallest and largest items in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>
            The indexes of the smallest and largest items in the list, in that order -or- indexes past the end of the list if it is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.MinimumMaximum``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Finds the indexes of the smallest and largest items in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <returns>
            The indexes of the smallest and largest items in the list, in that order -or- indexes past the end of the list if it is empty.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.Mismatch``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2})">
            <summary>
            Finds the offset into the given lists where they differ.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>
            The index into the given lists where they differ 
            -or- the index past the end of a list, if one is shorter
            -or- the index past the end of both lists, if they are equal.
            </returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
        </member>
        <member name="M:NList.List.Mismatch``3(NList.IReadOnlySublist{``0,``2},NList.IReadOnlySublist{``1,``2},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Finds the offset into the given lists where they differ.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <param name="comparer">The comparer to use to compare items in the lists.</param>
            <returns>
            The index into the given lists where they differ 
            -or- the index past the end of a list, if one is shorter
            -or- the index past the end of both lists, if they are equal.
            </returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.Mismatch``4(NList.IReadOnlySublist{``0,``1},NList.IReadOnlySublist{``2,``3},System.Func{``1,``3,System.Boolean})">
            <summary>
            Finds the offset into the given lists where they differ.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="T1">The type of the items in the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T2">The type of the items in the second list.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <param name="comparison">The comparison delegate to use to compare items in the lists.</param>
            <returns>
            The index into the given lists where they differ 
            -or- the index past the end of a list, if one is shorter
            -or- the index past the end of both lists, if they are equal.
            </returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.NextPermutation``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Arranges the items in a list to the next lexicographic permutation and returns true. 
            If there isn't another permutation, it arranges the sequence to the first permutation and returns false.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to find the next permutation for.</param>
            <returns>
            True if the items were arranged to the next permutation; otherwise, false if the items were rearranged to the first permutation.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>
            This algorithm assumes that, in order to enumerate every permutation, 
            the list is initially sorted according to the default ordering of the items.
            </remarks>
        </member>
        <member name="M:NList.List.NextPermutation``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Arranges the items in a list to the next lexicographic permutation and returns true. 
            If there isn't another permutation, it arranges the sequence to the first permutation and returns false.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to find the next permutation for.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>
            True if the items were arranged to the next permutation; otherwise, false if the items were rearranged to the first permutation.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            This algorithm assumes that, in order to enumerate every permutation, 
            the list is initially sorted according to the comparer.
            </remarks>
        </member>
        <member name="M:NList.List.NextPermutation``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Arranges the items in a list to the next lexicographic permutation and returns true. 
            If there isn't another permutation, it arranges the sequence to the first permutation and returns false.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to find the next permutation for.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <returns>
            True if the items were arranged to the next permutation; otherwise, false if the items were rearranged to the first permutation.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            This algorithm assumes that, in order to enumerate every permutation, 
            the list is initially sorted according to the comparer.
            </remarks>
        </member>
        <member name="M:NList.List.OverwriteDuplicates``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Overwrites duplicate items in a list with the next non-duplicate.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to overwrite the duplicates in.</param>
            <returns>The index past the last non-duplicate item.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>
            The list is expected to be sorted according to the default order of the items.
            Use this algorithm when either the size of the list is fixed
            -or- it is more efficient to first move valid items to the front of the list and then remove those remaining from the back.
            </remarks>
        </member>
        <member name="M:NList.List.OverwriteDuplicates``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Overwrites duplicate items in a list with the next non-duplicate.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to overwrite the duplicates in.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>The index past the last non-duplicate item.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            The list is expected to be sorted such that equivalent items appear adjacent to one another.
            Use this algorithm when either the size of the list is fixed
            -or- it is more efficient to first move valid items to the front of the list and then remove those remaining from the back.
            </remarks>
        </member>
        <member name="M:NList.List.OverwriteDuplicates``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Boolean})">
            <summary>
            Overwrites duplicate items in a list with the next non-duplicate.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to overwrite the duplicates in.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <returns>The index past the last non-duplicate item.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            The list is expected to be sorted such that equivalent items appear adjacent to one another.
            Use this algorithm when either the size of the list is fixed
            -or- it is more efficient to first move valid items to the front of the list and then remove those remaining from the back.
            </remarks>26
        </member>
        <member name="M:NList.List.OverwriteIf``2(NList.IMutableSublist{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Overwrites the items in a list that satisfy the predicate with items that do not.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to overwrite items in.</param>
            <param name="predicate">The condition an item must satisfy to be overwritten.</param>
            <returns>The index past the last item not satisfying the predicate.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>
            Use this algorithm when either the size of the list is fixed
            -or- it is more efficient to first move valid items to the front of the list and then remove those remaining from the back.
            </remarks>
        </member>
        <member name="M:NList.List.PartialSort``2(NList.IMutableSublist{``0,``1},System.Int32)">
            <summary>
            Sorts a list such that the first items appear as if the entire list were sorted.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in a list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="numberOfItems">The number of items to sort.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of items is negative -or- larger than the size of the list.</exception>
        </member>
        <member name="M:NList.List.PartialSort``2(NList.IMutableSublist{``0,``1},System.Int32,System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts a list such that the first items appear as if the entire list were sorted.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The list to sort.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="numberOfItems">The number of items to sort.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of items is negative -or- larger than the size of the list.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.PartialSort``2(NList.IMutableSublist{``0,``1},System.Int32,System.Func{``1,``1,System.Int32})">
            <summary>
            Sorts a list such that the first items appear as if the entire list were sorted.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The list to sort.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="numberOfItems">The number of items to sort.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The number of items is negative -or- larger than the size of the list.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.Partition``2(NList.IMutableSublist{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Partitions a list such that the items satisfying the predicate are moved to the front
            and the rest are moved to the back.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to partition.</param>
            <param name="predicate">The condition an item must satisfy to be moved to the front.</param>
            <returns>The index past the last item to satisfy the predicate.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:NList.List.PreviousPermutation``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Arranges the items in a list to the previous lexicographic permutation and returns true. 
            If there isn't another permutation, it arranges the sequence to the last permutation and returns false.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to find the previous permutation for.</param>
            <returns>
            True if the items were arranged to the previous permutation; otherwise, false if the items were rearranged to the last permutation.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>
            This algorithm assumes that, in order to enumerate every permutation, 
            the list is initially sorted according to the default ordering of the items.
            </remarks>
        </member>
        <member name="M:NList.List.PreviousPermutation``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Arranges the items in a list to the previous lexicographic permutation and returns true. 
            If there isn't another permutation, it arranges the sequence to the last permutation and returns false.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to find the previous permutation for.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>
            True if the items were arranged to the previous permutation; otherwise, false if the items were rearranged to the last permutation.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>
            This algorithm assumes that, in order to enumerate every permutation, 
            the list is initially sorted in reverse according to the comparer.
            </remarks>
        </member>
        <member name="M:NList.List.PreviousPermutation``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Arranges the items in a list to the previous lexicographic permutation and returns true. 
            If there isn't another permutation, it arranges the sequence to the last permutation and returns false.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to find the previous permutation for.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <returns>
            True if the items were arranged to the previous permutation; otherwise, false if the items were rearranged to the last permutation.
            </returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>
            This algorithm assumes that, in order to enumerate every permutation, 
            the list is initially sorted in reverse according to the comparer.
            </remarks>
        </member>
        <member name="M:NList.List.QuickSort``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Sorts a list using the quick sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.QuickSort``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts a list using the quick sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.QuickSort``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Sorts a list using the quick sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.RandomShuffle``2(NList.IMutableSublist{``0,``1},System.Random)">
            <summary>
            Rearranges the items in a list randomly.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to shuffle.</param>
            <param name="random">The random generator to use to shuffle the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The random generator is null.</exception>
        </member>
        <member name="M:NList.List.RandomShuffle``2(NList.IMutableSublist{``0,``1},System.Func{System.Int32})">
            <summary>
            Rearranges the items in a list randomly.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to shuffle.</param>
            <param name="generator">The generator to use to shuffle the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The generator is null.</exception>
        </member>
        <member name="M:NList.List.RemoveRange``2(NList.IExpandableSublist{``0,``1})">
            <summary>
            Removes all of the items in the range defined by a Sublist.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list containing the items to remove.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.RemoveDuplicates``2(NList.IExpandableSublist{``0,``1})">
            <summary>
            Removes duplicate items from a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to remove the duplicates from.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.RemoveDuplicates``2(NList.IExpandableSublist{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Removes duplicate items from a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to remove the duplicates from.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.RemoveDuplicates``2(NList.IExpandableSublist{``0,``1},System.Func{``1,``1,System.Boolean})">
            <summary>
            Removes duplicate items from a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to remove the duplicates from.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.RemoveIf``2(NList.IExpandableSublist{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Removes the items from a list that satisfy the predicate.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to remove the items from.</param>
            <param name="predicate">The condition an item must satisfy in order to be removed.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:NList.List.Replace``2(NList.IMutableSublist{``0,``1},System.Func{``1,System.Boolean},``1)">
            <summary>
            Replaces any items in a list that satisfy the predicate with the replacement value.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to replace the items in.</param>
            <param name="predicate">The condition an item must satisfy to be replaced.</param>
            <param name="replacement">The value to replace the items with.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:NList.List.Replace``2(NList.IMutableSublist{``0,``1},System.Func{``1,System.Boolean},System.Func{``1,``1})">
            <summary>
            Replaces any items in a list that satisfy the predicate with the results of calling the generator.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to replace the items in.</param>
            <param name="predicate">The condition an item must satisfy to be replaced.</param>
            <param name="generator">The generator delegate to call to generate the replacement values.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
            <exception cref="T:System.ArgumentNullException">The generator delegate is null.</exception>
        </member>
        <member name="M:NList.List.Reverse``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Reverses the items in a list.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to reverse.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.RotateLeft``2(NList.IMutableSublist{``0,``1},System.Int32)">
            <summary>
            Rotates the items in a list the specified amount to the left.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to rotate.</param>
            <param name="shift">The amount to shift the items to the left.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>
            If the shift is negative, the algoritm simulates rotating the items to the right. If the shift is larger than the number of items, 
            the algorithm will simulate a complete rotation as many times as necessary.
            </remarks>
        </member>
        <member name="M:NList.List.SelectionSort``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Sorts a list using the selection sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.SelectionSort``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts a list using the selection sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.SelectionSort``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Sorts a list using the selection sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.ShellSort``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Sorts a list using the selection sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.List.ShellSort``2(NList.IMutableSublist{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts a list using the selection sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
        </member>
        <member name="M:NList.List.ShellSort``2(NList.IMutableSublist{``0,``1},System.Func{``1,``1,System.Int32})">
            <summary>
            Sorts a list using the selection sort algorithm.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to sort.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
        </member>
        <member name="M:NList.List.StablePartition``2(NList.IMutableSublist{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Partitions a list such that the items satisfying the predicate appear in the front of the list, 
            retaining their relative order, and those that don't appear at the end, retaining their relative order.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to partition.</param>
            <param name="predicate">The condition an item must satisfy to appear at the front of the list.</param>
            <returns>
            The index of the first item that does not satisfy the predicate 
            -or- the index past the end of the list, if every item satisfies the condition.
            </returns>
            <remarks>
            This algorithm requires temporarily storing the items that do not satisfy the predicate in another container.
            </remarks>
        </member>
        <member name="M:NList.List.SwapRanges``3(NList.IMutableSublist{``0,``2},NList.IMutableSublist{``1,``2})">
            <summary>
            Swaps the items between two lists.
            </summary>
            <typeparam name="TList1">The type of the first list.</typeparam>
            <typeparam name="TList2">The type of the second list.</typeparam>
            <typeparam name="T">The type of the items in the lists.</typeparam>
            <param name="list1">The first list.</param>
            <param name="list2">The second list.</param>
            <returns>The indexes into the list after the last items were swapped.</returns>
            <exception cref="T:System.ArgumentNullException">The first list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The second list is null.</exception>
            <remarks>The algorithm will stop when all of the items from the shorter list are swapped.</remarks>
        </member>
        <member name="M:NList.List.TrueForAll``2(NList.IReadOnlySublist{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Determines whether every item in a list satisfies the predicate.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to check.</param>
            <param name="predicate">The condition every item must satisfy.</param>
            <returns>True if every item in the list satisfies the predicate; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The predicate is null.</exception>
        </member>
        <member name="M:NList.List.UpperBound``2(NList.IReadOnlySublist{``0,``1},``1)">
            <summary>
            Finds the last index in a sorted list where the given value would belong.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for.</param>
            <returns>The last index in a sorted list where the given value would belong.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <remarks>This algorithm assumes that the list is sorted according to the default order of the items.</remarks>
        </member>
        <member name="M:NList.List.UpperBound``2(NList.IReadOnlySublist{``0,``1},``1,System.Collections.Generic.IComparer{``1})">
            <summary>
            Finds the last index in a sorted list where the given value would belong.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for.</param>
            <param name="comparer">The comparer to use to compare items in the list.</param>
            <returns>The last index in a sorted list where the given value would belong.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <remarks>This algorithm assumes that the list is sorted according to the given comparer.</remarks>
        </member>
        <member name="M:NList.List.UpperBound``3(NList.IReadOnlySublist{``0,``1},``2,System.Func{``1,``2,System.Int32})">
            <summary>
            Finds the last index in a sorted list where the given value would belong.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <typeparam name="TSearch">The type of the value to search for.</typeparam>
            <param name="list">The list to search.</param>
            <param name="value">The value to search for.</param>
            <param name="comparison">The comparison delegate to use to compare items in the list.</param>
            <returns>The last index in a sorted list where the given value would belong.</returns>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison delegate is null.</exception>
            <remarks>This algorithm assumes that the list is sorted according to the given comparison delegate.</remarks>
        </member>
        <member name="T:NList.PriorityQueue`1">
            <summary>
            Stores and returns items in the order of their priority.
            </summary>
            <typeparam name="T">The type of the items in the queue.</typeparam>
        </member>
        <member name="M:NList.PriorityQueue`1.#ctor">
            <summary>
            Initializes a new instance of a PriorityQueue.
            </summary>
        </member>
        <member name="M:NList.PriorityQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of a PriorityQueue.
            </summary>
            <param name="capacity">The initial capacity of the queue.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The capacity is negative.</exception>
        </member>
        <member name="M:NList.PriorityQueue`1.#ctor(System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of a PriorityQueue.
            </summary>
            <param name="comparison">The comparison function to use to prioritize the items.</param>
            <exception cref="T:System.ArgumentNullException">The comparison function is null.</exception>
        </member>
        <member name="M:NList.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of a PriorityQueue.
            </summary>
            <param name="comparer">The comparer to use to prioritize the items.</param>
            <exception cref="T:System.ArgumentNullException">The comparer function is null.</exception>
        </member>
        <member name="M:NList.PriorityQueue`1.#ctor(System.Int32,System.Func{`0,`0,System.Int32})">
            <summary>
            Initializes a new instance of a PriorityQueue.
            </summary>
            <param name="capacity">The initial capacity of the queue.</param>
            <param name="comparison">The comparison function to use to prioritize the items.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The capacity is negative.</exception>
            <exception cref="T:System.ArgumentNullException">The comparison function is null.</exception>
        </member>
        <member name="M:NList.PriorityQueue`1.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of a PriorityQueue.
            </summary>
            <param name="capacity">The initial capacity of the queue.</param>
            <param name="comparer">The comparer to use to determine priority.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The capacity is negative.</exception>
            <exception cref="T:System.ArgumentNullException">The comparer function is null.</exception>
        </member>
        <member name="M:NList.PriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of a PriorityQueue.
            </summary>
            <param name="collection">The items to initially populate the queue with.</param>
            <exception cref="T:System.ArgumentNullException">The collection is null.</exception>
        </member>
        <member name="M:NList.PriorityQueue`1.#ctor(System.Func{`0,`0,System.Int32},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of a PriorityQueue.
            </summary>
            <param name="comparison">The comparison function to use to determine priority.</param>
            <param name="collection">The items to initially populate the queue with.</param>
            <exception cref="T:System.ArgumentNullException">The comparison function is null.</exception>
            <exception cref="T:System.ArgumentNullException">The collection is null.</exception>
        </member>
        <member name="M:NList.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of a PriorityQueue.
            </summary>
            <param name="comparer">The comparer to use to determine priority.</param>
            <param name="collection">The items to initially populate the queue with.</param>
            <exception cref="T:System.ArgumentNullException">The comparer is null.</exception>
            <exception cref="T:System.ArgumentNullException">The collection is null.</exception>
        </member>
        <member name="M:NList.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Adds the given item to the queue.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:NList.PriorityQueue`1.Peek">
            <summary>
            Gets the highest priority item from the queue.
            </summary>
        </member>
        <member name="M:NList.PriorityQueue`1.Dequeue">
            <summary>
            Removes the highest priority item from the queue.
            </summary>
            <returns>The highest priority item in the queue.</returns>
        </member>
        <member name="M:NList.PriorityQueue`1.Clear">
            <summary>
            Removes all of the items from the queue.
            </summary>
        </member>
        <member name="M:NList.PriorityQueue`1.Contains(`0)">
            <summary>
            Determines whether the given item appears in the queue.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>True if the item is in the queue.</returns>
            <remarks>This searches for the value by equality, not using the priority comparison.</remarks>
        </member>
        <member name="M:NList.PriorityQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items in the queue into the array,
            removing the items from the queue.
            </summary>
            <param name="array">The array to copy the items to.</param>
            <param name="arrayIndex">The index into the array to start copying.</param>
        </member>
        <member name="M:NList.PriorityQueue`1.ToArray">
            <summary>
            Creates an array containing the items that were in the queue.
            </summary>
            <returns>The array of the items that were in the queue.</returns>
        </member>
        <member name="M:NList.PriorityQueue`1.GetEnumerator">
            <summary>
            Gets an enumerator that returns the items from the queue
            in order of the highest priority.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:NList.PriorityQueue`1.Comparer">
            <summary>
            Gets the comparer being used to prioritize the items.
            </summary>
        </member>
        <member name="P:NList.PriorityQueue`1.Count">
            <summary>
            Gets the number of items in the queue.
            </summary>
        </member>
        <member name="T:NList.Utilities">
            <summary>
            Provides various utility methods.
            </summary>
        </member>
        <member name="M:NList.Utilities.Convert``2(``0)">
            <summary>
            Converts the given value to the specified type.
            </summary>
            <typeparam name="T">The type of the value to convert.</typeparam>
            <typeparam name="TResult">The type to convert the value to.</typeparam>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.InvalidCastException">
            This conversion is not supported 
            -or- value is null and TResult is a value type
            -or- value does not implement the <see cref="T:System.IConvertible"/> interface.
            </exception>
            <exception cref="T:System.FormatException">The value is not in a format recognized by the default provider.</exception>
            <exception cref="T:System.OverflowException">The value represents a number that is out of the range of TResult.</exception>
        </member>
        <member name="M:NList.Utilities.Convert``2(``0,System.IFormatProvider)">
            <summary>
            Converts the given value to the specified type, using the given format provider.
            </summary>
            <typeparam name="T">The type of the value to convert.</typeparam>
            <typeparam name="TResult">The type to convert the value to.</typeparam>
            <param name="value">The value to convert.</param>
            <param name="provider">The format provider to use to assist in the conversion.</param>
            <returns>The converted value.</returns>
            <exception cref="T:System.ArgumentNullException">The format provider is null.</exception>
            <exception cref="T:System.InvalidCastException">
            This conversion is not supported 
            -or- value is null and conversionType is a value type
            -or- value does not implement the <see cref="T:System.IConvertible"/> interface.
            </exception>
            <exception cref="T:System.FormatException">The value is not in a format recognized by the provider.</exception>
            <exception cref="T:System.OverflowException">The value represents a number that is out of the range of TResult.</exception>
        </member>
        <member name="M:NList.Utilities.Swap``1(``0@,``0@)">
            <summary>
            Swaps the given values.
            </summary>
            <typeparam name="T">The type of the values being swapped.</typeparam>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
        </member>
        <member name="T:NList.Sublist">
            <summary>
            Provides methods for creating instances of Sublist.
            </summary>
        </member>
        <member name="M:NList.Sublist.ToSublist``1(System.Collections.Generic.List{``0})">
            <summary>
            Wraps the given list such that the entirety of the list is visible.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to wrap.</param>
            <returns>A Sublist wrapping the given list.</returns>
        </member>
        <member name="M:NList.Sublist.ToSublist``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Wraps the given list such that the first item starts at the given offset and contains the remaining items.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to wrap.</param>
            <param name="offset">The starting index into the list to create the view.</param>
            <returns>A Sublist wrapping the given list.</returns>
        </member>
        <member name="M:NList.Sublist.ToSublist``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
            Wraps the given list such that the first item starts at the given offset and contains the number of items
            specified by the count.
            </summary>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to wrap.</param>
            <param name="offset">The starting index into the list to create the view.</param>
            <param name="count">The number of items to include in the view.</param>
            <returns>A Sublist wrapping the given list.</returns>
        </member>
        <member name="M:NList.Sublist.ToSublist``1(``0[])">
            <summary>
            Wraps the given array such that the entire array is visible.
            </summary>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The array to wrap.</param>
            <returns>A Sublist wrapping the given array.</returns>
        </member>
        <member name="M:NList.Sublist.ToSublist``1(``0[],System.Int32)">
            <summary>
            Wraps the given array such that the first item starts at the given offset and contains the remaining items.
            </summary>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The array to wrap.</param>
            <param name="offset">The starting index into the array to create the view.</param>
            <returns>A Sublist wrapping the given array.</returns>
        </member>
        <member name="M:NList.Sublist.ToSublist``1(``0[],System.Int32,System.Int32)">
            <summary>
            Wraps the given array such that the first item starts at the given offset and contains the number of items
            specified by the count.
            </summary>
            <typeparam name="T">The type of items in the array.</typeparam>
            <param name="array">The array to wrap.</param>
            <param name="offset">The starting index into the array to create the view.</param>
            <param name="count">The number of items to include in the view.</param>
            <returns>A Sublist wrapping the given array.</returns>
        </member>
        <member name="M:NList.Sublist.ToSublist``1(System.Collections.ObjectModel.Collection{``0})">
            <summary>
            Wraps the given collection such that the entirety of the collection is visible.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to wrap.</param>
            <returns>A Sublist wrapping the given collection.</returns>
        </member>
        <member name="M:NList.Sublist.ToSublist``1(System.Collections.ObjectModel.Collection{``0},System.Int32)">
            <summary>
            Wraps the given collection such that the first item starts at the given offset and contains the remaining items.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to wrap.</param>
            <param name="offset">The starting index into the collection to create the view.</param>
            <returns>A Sublist wrapping the given collection.</returns>
        </member>
        <member name="M:NList.Sublist.ToSublist``1(System.Collections.ObjectModel.Collection{``0},System.Int32,System.Int32)">
            <summary>
            Wraps the given collection such that the first item starts at the given offset and contains the number of items
            specified by the count.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to wrap.</param>
            <param name="offset">The starting index into the collection to create the view.</param>
            <param name="count">The number of items to include in the view.</param>
            <returns>A Sublist wrapping the given collection.</returns>
        </member>
        <member name="T:NList.Sublist`2">
            <summary>
            Creates a view into a list starting at an offset and containing a designated number of items.
            </summary>
            <typeparam name="TList">The type of the list to wrap.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
        </member>
        <member name="M:NList.Sublist`2.#ctor(`0)">
            <summary>
            Initializes a new instance of a Sublist representing a splice containing the entire list.
            </summary>
            <param name="list">The list to wrap.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.Sublist`2.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of a Sublist representing a splice starting at the given offset and containing
            the remaining items.
            </summary>
            <param name="list">The list to wrap.</param>
            <param name="offset">The index into the list to treat as the start of the splice.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bounds of the list.</exception>
        </member>
        <member name="M:NList.Sublist`2.#ctor(`0,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of a Sublist representing a splice starting at the given offset and containing
            count items.
            </summary>
            <param name="list">The list to wrap.</param>
            <param name="offset">The index into the list to treat as the start of the splice.</param>
            <param name="count">The number of items to include in the splice.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bounds of the list.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The count is greater than the remaining items in the list.</exception>
        </member>
        <member name="M:NList.Sublist`2.Nest(System.Int32)">
            <summary>
            Creates a new Sublist that acts as a splice into the Sublist, starting at the given offset.
            </summary>
            <param name="offset">The offset into the Sublist to start the new splice.</param>
            <returns>A new Sublist starting at the given offset into the Sublist, consisting of the remaining items.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bounds of the Sublist.</exception>
        </member>
        <member name="M:NList.Sublist`2.Nest(System.Int32,System.Int32)">
            <summary>
            Creates a new Sublist that acts as a splice into the Sublist, starting at the given offset, spanning
            the number of items specified by the count.
            </summary>
            <param name="offset">The offset into the Sublist to start the new splice.</param>
            <param name="count">The number of items to include in the splice.</param>
            <returns>
            A new Sublist starting at the given offset into the Sublist, spanning the number of items specified by the count.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is negative -or- outside the bounds of the Sublist.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The count is negative -or-  beyond the bounds of the Sublist.
            </exception>
        </member>
        <member name="M:NList.Sublist`2.IndexOf(`1)">
            <summary>
            Gets the index of the first occurrence of the given value.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>The index of the first occurrence of the given value -or- negative one if the value is not found.</returns>
            <remarks>The returned index is relative to Sublist, rather than the underlying list.</remarks>
        </member>
        <member name="M:NList.Sublist`2.Insert(System.Int32,`1)">
            <summary>
            Inserts the item at the given index.
            </summary>
            <param name="index">The index into the Sublist to insert the given item.</param>
            <param name="item">The item to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- beyond the bounds of the list.</exception>
        </member>
        <member name="M:NList.Sublist`2.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the given index.
            </summary>
            <param name="index">The index into the Sublist to remove the item.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- beyond the bounds of the list.</exception>
        </member>
        <member name="M:NList.Sublist`2.Add(`1)">
            <summary>
            Adds the given item to the end of the list.
            </summary>
            <param name="item">The item to add to the list.</param>
        </member>
        <member name="M:NList.Sublist`2.Clear">
            <summary>
            Removes all of the items from the list.
            </summary>
        </member>
        <member name="M:NList.Sublist`2.Contains(`1)">
            <summary>
            Determines whether the list contains the given item.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>True if the item is in the list; otherwise, false.</returns>
        </member>
        <member name="M:NList.Sublist`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the list items to the given array, starting at the given index.
            </summary>
            <param name="array">The array to copy the values to.</param>
            <param name="arrayIndex">The index into the array to start copying.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The array index is negative.</exception>
            <exception cref="T:System.ArgumentException">There are too many list items to fit within the remaining space of the array.</exception>
        </member>
        <member name="M:NList.Sublist`2.Remove(`1)">
            <summary>
            Removes the first occurrence of the given item, if it exists.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
        </member>
        <member name="M:NList.Sublist`2.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:NList.Sublist`2.op_Implicit(`0)~NList.Sublist{`0,`1}">
            <summary>
            Implicitly creates a new instance of a Sublist spanning the entirety of a list.
            </summary>
            <param name="list">The list to wrap with a Sublist.</param>
            <returns>A new instance of a Sublist.</returns>
        </member>
        <member name="P:NList.Sublist`2.List">
            <summary>
            Gets the underlying list.
            </summary>
        </member>
        <member name="P:NList.Sublist`2.Offset">
            <summary>
            Gets or sets the offset into the underlying list.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is negative -or- outside the bounds of the underlying list.
            </exception>
            <remarks>The Sublist's count is adjusted automatically to prevent the splice from going beyond the end of the list.</remarks>
        </member>
        <member name="P:NList.Sublist`2.Count">
            <summary>
            Gets or sets the number of items to include in the Sublist.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is negative -or- outside the bounds of the underlying list.
            </exception>
        </member>
        <member name="P:NList.Sublist`2.Item(System.Int32)">
            <summary>
            Gets or sets the item at the given index.
            </summary>
            <param name="index">The index into the Sublist to get the item.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- beyond the bounds of the list.</exception>
        </member>
        <member name="T:NList.ReversedList">
            <summary>
            Provides methods for creating instances of ReveredList.
            </summary>
        </member>
        <member name="M:NList.ReversedList.Reversed``1(System.Collections.Generic.List{``0})">
            <summary>
            Wraps a list with a ReversedList.
            </summary>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to wrap.</param>
            <returns>A ReversedList wrapping the given list.</returns>
        </member>
        <member name="M:NList.ReversedList.Reversed``1(``0[])">
            <summary>
            Wraps an array with a ReversedList.
            </summary>
            <typeparam name="T">The type of the items in the array.</typeparam>
            <param name="array">The array to wrap.</param>
            <returns>A ReversedList wrapping the given array.</returns>
        </member>
        <member name="M:NList.ReversedList.Reversed``1(System.Collections.ObjectModel.Collection{``0})">
            <summary>
            Wraps a collection with a ReversedList.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <param name="collection">The collection to wrap.</param>
            <returns>A ReversedList wrapping the given collection.</returns>
        </member>
        <member name="M:NList.ReversedList.Reversed``2(NList.ReversedList{``0,``1})">
            <summary>
            Unwraps a ReversedList.
            </summary>
            <typeparam name="TList">The type of the underlying list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="list">The list to wrap.</param>
            <returns>A ReversedList wrapping the given list.</returns>
        </member>
        <member name="M:NList.ReversedList.Reversed``2(NList.IReadOnlySublist{``0,``1})">
            <summary>
            Wraps a sublist in a ReversedList.
            </summary>
            <typeparam name="TList">The type of the sublist's underlying list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="sublist">The sublist to reverse.</param>
            <returns>A sublist, wrapping a reversed list over the original sublist.</returns>
            <exception cref="T:System.ArgumentNullException">The sublist is null.</exception>
        </member>
        <member name="M:NList.ReversedList.Reversed``2(NList.IMutableSublist{``0,``1})">
            <summary>
            Wraps a sublist in a ReversedList.
            </summary>
            <typeparam name="TList">The type of the sublist's underlying list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="sublist">The sublist to reverse.</param>
            <returns>A sublist, wrapping a reversed list over the original sublist.</returns>
            <exception cref="T:System.ArgumentNullException">The sublist is null.</exception>
        </member>
        <member name="M:NList.ReversedList.Reversed``2(NList.IExpandableSublist{``0,``1})">
            <summary>
            Wraps a sublist in a ReversedList.
            </summary>
            <typeparam name="TList">The type of the sublist's underlying list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="sublist">The sublist to reverse.</param>
            <returns>A sublist, wrapping a reversed list over the original sublist.</returns>
            <exception cref="T:System.ArgumentNullException">The sublist is null.</exception>
        </member>
        <member name="M:NList.ReversedList.Reversed``2(NList.IReadOnlySublist{NList.ReversedList{``0,``1},``1})">
            <summary>
            Unwraps a reversed sublist.
            </summary>
            <typeparam name="TList">The type of the underlying list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="sublist">The list to unwrap.</param>
            <returns>The underlying list.</returns>
        </member>
        <member name="M:NList.ReversedList.Reversed``2(NList.IMutableSublist{NList.ReversedList{``0,``1},``1})">
            <summary>
            Unwraps a reversed sublist.
            </summary>
            <typeparam name="TList">The type of the underlying list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="sublist">The list to unwrap.</param>
            <returns>The underlying list.</returns>
        </member>
        <member name="M:NList.ReversedList.Reversed``2(NList.IExpandableSublist{NList.ReversedList{``0,``1},``1})">
            <summary>
            Unwraps a reversed sublist.
            </summary>
            <typeparam name="TList">The type of the underlying list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
            <param name="sublist">The list to unwrap.</param>
            <returns>The underlying list.</returns>
        </member>
        <member name="T:NList.ReversedList`2">
            <summary>
            Creates a view into a list such that it appears that the items are reversed.
            </summary>
            <typeparam name="TList">The type of the list.</typeparam>
            <typeparam name="T">The type of the items in the list.</typeparam>
        </member>
        <member name="M:NList.ReversedList`2.#ctor(`0)">
            <summary>
            Initializes a new instance of a ReversedList that wraps the given list.
            </summary>
            <param name="list">The list to wrap.</param>
            <exception cref="T:System.ArgumentNullException">The list is null.</exception>
        </member>
        <member name="M:NList.ReversedList`2.BaseIndex(System.Int32)">
            <summary>
            Gets the index to use to retrieve the value in the underlying list that the given index refers to.
            </summary>
            <param name="index">The index to translate.</param>
            <returns>The index to use to retrieve the value in the underlying list that the given index refers to.</returns>
            <remarks>If the given index is out of range, the result will also be out of range in the underlying list.</remarks>
        </member>
        <member name="M:NList.ReversedList`2.IndexOf(`1)">
            <summary>
            Finds the index of the given item in the list.
            </summary>
            <param name="item">The value to find the index for.</param>
            <returns>The index of the item in the list; otherwise -1.</returns>
        </member>
        <member name="M:NList.ReversedList`2.Insert(System.Int32,`1)">
            <summary>
            Inserts the value at the given index.
            </summary>
            <param name="index">The index to insert the item.</param>
            <param name="item">The item to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index is negative -or- beyond the bound of the list.
            </exception>
            <exception cref="T:System.NotSupportedException">The list is read-only.</exception>
        </member>
        <member name="M:NList.ReversedList`2.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the given index.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- outside the bounds of the list.</exception>
            <exception cref="T:System.NotSupportedException">The list is read-only.</exception>
        </member>
        <member name="M:NList.ReversedList`2.Add(`1)">
            <summary>
            Adds the given item to the end of the list.
            </summary>
            <param name="item">The item to add.</param>
            <exception cref="T:System.NotSupportedException">The list is read-only.</exception>
        </member>
        <member name="M:NList.ReversedList`2.Clear">
            <summary>
            Clears the list of all items.
            </summary>
            <exception cref="T:System.NotSupportedException">The list is read-only.</exception>
        </member>
        <member name="M:NList.ReversedList`2.Contains(`1)">
            <summary>
            Determines whether the given item is in the list.
            </summary>
            <param name="item">The item to search for.</param>
            <returns>True if the value exists in the list; otherwise false.</returns>
        </member>
        <member name="M:NList.ReversedList`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the list to the give array, starting at the specified index.
            </summary>
            <param name="array">The array to copy the list to.</param>
            <param name="arrayIndex">The index into the array to start copying.</param>
            <exception cref="T:System.ArgumentNullException">The array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The array index is negative.</exception>
            <exception cref="T:System.ArgumentException">
            The number of items in the list is greater than the available space from arrayIndex to the end of the destination array.
            </exception>
        </member>
        <member name="M:NList.ReversedList`2.Remove(`1)">
            <summary>
            Removes the item from the list.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>True if the item was removed; otherwise, false.</returns>
            <exception cref="T:System.NotSupportedException">The list is read-only.</exception>
        </member>
        <member name="M:NList.ReversedList`2.GetEnumerator">
            <summary>
            Gets an enumerator over the items in the list.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:NList.ReversedList`2.op_Implicit(`0)~NList.ReversedList{`0,`1}">
            <summary>
            Implicitly creates a new instance of a ReversedList from a list.
            </summary>
            <param name="list">The list to wrap with a ReversedList.</param>
            <returns>A new instance of a ReversedList.</returns>
        </member>
        <member name="P:NList.ReversedList`2.List">
            <summary>
            Gets or sets the underlying list.
            </summary>
        </member>
        <member name="P:NList.ReversedList`2.Item(System.Int32)">
            <summary>
            Gets or sets the item at the given index.
            </summary>
            <param name="index">The index of the item to get or set.</param>
            <returns>The item at the given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The index is negative -or- outside the bounds of the list.</exception>
        </member>
        <member name="P:NList.ReversedList`2.Count">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:NList.ReversedList`2.IsReadOnly">
            <summary>
            Gets whether the list is read-only.
            </summary>
        </member>
        <member name="T:NList.KeyEqualityComparer`1">
            <summary>
            Compares values by comparing their extracted key values.
            </summary>
            <typeparam name="T">The type of the value being compared.</typeparam>
        </member>
        <member name="M:NList.KeyEqualityComparer`1.#ctor">
            <summary>
            Initializes a new instances of a KeyEqualityComparer.
            </summary>
        </member>
        <member name="M:NList.KeyEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the given values are equal.
            </summary>
            <param name="x">The first value.</param>
            <param name="y">The second value.</param>
            <returns>True if the given value are equal; otherwise, false.</returns>
            <remarks>
            This method executes by comparing the keys generated by the underlying key selector.
            If one of the items passed to the method are null, the key selector must be made to handle nulls.
            </remarks>
        </member>
        <member name="M:NList.KeyEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Gets the hash code for the given value.
            </summary>
            <param name="obj">The value to get the hash code for.</param>
            <returns>The hash code.</returns>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
        </member>
        <member name="M:NList.KeyEqualityComparer`1.Using``1(System.Func{`0,``0})">
            <summary>
            Creates a KeyEqualityComparer that compares values by the key returned by the key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The delegate to use to select the key.</param>
            <returns>A KeyEqualityComparer that compares values by the key returned by the key selector.</returns>
            <exception cref="T:System.ArgumentNullException">The key selector delegate is null.</exception>
        </member>
        <member name="M:NList.KeyEqualityComparer`1.Using``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a KeyEqualityComparer that compares values by the key returned by the key selector.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="keySelector">The delegate used to select the key.</param>
            <param name="keyComparer">The equality comparer to use to compare the keys.</param>
            <returns>A KeyEqualityComparer that compares values by the key returned by the key selector.</returns>
            <exception cref="T:System.ArgumentNullException">The key selector delegate is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key equality comparer is null.</exception>
        </member>
        <member name="M:NList.KeyEqualityComparer`1.And``1(System.Func{`0,``0})">
            <summary>
            Creates a KeyEqualityComparer based on the current key comparer that
            in addition checks for equality based the value returned by the key selector.
            </summary>
            <typeparam name="TKey">The type of the value returned by the key selector.</typeparam>
            <param name="keySelector">The delegate used to select the next key.</param>
            <returns>
            A KeyEqualityComparer based on the current key comparer that
            in addition checks for equality based the value returned by the key selector.
            </returns>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
        </member>
        <member name="M:NList.KeyEqualityComparer`1.And``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a KeyEqualityComparer based on the current key comparer that
            in addition checks for equality based the value returned by the key selector.
            </summary>
            <typeparam name="TKey">The type of the value returned by the key selector.</typeparam>
            <param name="keySelector">The delegate used to select the next key.</param>
            <param name="keyComparer">The equality comparer to use to compare the keys.</param>
            <returns>
            A KeyEqualityComparer based on the current key comparer that
            in addition checks for equality based the value returned by the key selector.
            </returns>
            <exception cref="T:System.ArgumentNullException">The key selector is null.</exception>
            <exception cref="T:System.ArgumentNullException">The key comparer is null.</exception>
        </member>
    </members>
</doc>
